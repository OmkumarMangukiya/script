{"workflow_name": "Chat with Postgresql Database", "training_prompts": ["Create a workflow that allows me to chat with a PostgreSQL database and execute SQL queries based on user inputs.", "I need an AI agent that can interpret natural language questions and run corresponding SQL commands on my PostgreSQL database.", "Build me a system to facilitate conversational interactions with my PostgreSQL database, where users can ask questions and receive data-driven answers.", "Design a workflow that enables users to communicate with a PostgreSQL database using a chat interface, including the ability to retrieve table definitions and structure.", "Create an AI-driven chat solution that connects to PostgreSQL, allowing users to explore their database and obtain insights through conversational queries."], "workflow": {"id": "eOUewYsEzJmQixI6", "meta": {"instanceId": "77c4feba8f41570ef06dc76ece9a6ded0f0d44f7f1477a64c2d71a8508c11faa", "templateCredsSetupCompleted": true}, "name": "Chat with Postgresql Database", "description": "This workflow template is designed for any professionals seeking relevant data from database using natural language.", "others": "How it works\nEach time user ask's question using the n8n chat interface, the workflow runs.\nThen the message is processed by AI Agent using relevant tools - Execute SQL Query, Get DB Schema and Tables List and Get Table Definition, if required. Agent uses these tools to form and run sql query which are necessary to answer the questions.\nOnce AI Agent has the data, it uses it to form answer and returns it to the user.\nSet up instructions\nComplete the Set up credentials step when you first open the workflow. You'll need a Postgresql Credentials, and OpenAI api key.", "tags": [], "nodes": [{"id": "6501a54f-a68c-452d-b353-d7e871ca3780", "name": "When chat message received", "type": "@n8n/n8n-nodes-langchain.chatTrigger", "position": [-300, -80], "webhookId": "cf1de04f-3e38-426c-89f0-3bdb110a5dcf", "parameters": {"options": {}}, "typeVersion": 1.1}, {"id": "cd32221b-2a36-408d-b57e-8115fcd810c9", "name": "AI Agent", "type": "@n8n/n8n-nodes-langchain.agent", "position": [0, -80], "parameters": {"agent": "openAiFunctionsAgent", "options": {"systemMessage": "You are DB assistant. You need to run queries in DB aligned with user requests.\n\nRun custom SQL query to aggregate data and response to user. Make sure every table has schema prefix to it in sql query which you can get from `Get DB Schema and Tables List` tool.\n\nFetch all data to analyse it for response if needed.\n\n## Tools\n\n- Execute SQL query - Executes any sql query generated by AI\n- Get DB Schema and Tables List - Lists all the tables in database with its schema name\n- Get Table Definition - Gets the table definition from db using table name and schema name"}}, "typeVersion": 1.7}, {"id": "8accbeeb-7eaf-4e9e-aabc-de8ab3a0459b", "name": "OpenAI Chat Model", "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi", "position": [-60, 160], "parameters": {"model": {"__rl": true, "mode": "list", "value": "gpt-4o-mini"}, "options": {}}, "credentials": {"openAiApi": {"id": "48uG61Ilo8jndw3r", "name": "Your OpenAI Account Credentials"}}, "typeVersion": 1.2}, {"id": "11f2013f-a080-4c9e-8773-c90492e2c628", "name": "Get Table Definition", "type": "n8n-nodes-base.postgresTool", "position": [780, 140], "parameters": {"query": "select\n  c.column_name,\n  c.data_type,\n  c.is_nullable,\n  c.column_default,\n  tc.constraint_type,\n  ccu.table_name AS referenced_table,\n  ccu.column_name AS referenced_column\nfrom\n  information_schema.columns c\nLEFT join\n  information_schema.key_column_usage kcu\n  ON c.table_name = kcu.table_name\n  AND c.column_name = kcu.column_name\nLEFT join\n  information_schema.table_constraints tc\n  ON kcu.constraint_name = tc.constraint_name\n  AND tc.constraint_type = 'FOREIGN KEY'\nLEFT join\n  information_schema.constraint_column_usage ccu\n  ON tc.constraint_name = ccu.constraint_name\nwhere\n  c.table_name = '{{ $fromAI(\"table_name\") }}'\n  AND c.table_schema = '{{ $fromAI(\"schema_name\") }}'\norder by\n  c.ordinal_position", "options": {}, "operation": "executeQuery", "descriptionType": "manual", "toolDescription": "Get table definition to find all columns and types"}, "credentials": {"postgres": {"id": "nGI61D0TEEZz18rr", "name": "Your Postgresql Database Credentials"}}, "typeVersion": 2.5}, {"id": "760bc9bc-0057-4088-b3f0-3ee37b3519df", "name": "Sticky Note", "type": "n8n-nodes-base.stickyNote", "position": [-300, -240], "parameters": {"color": 5, "width": 560, "height": 120, "content": "### \ud83d\udc68\u200d\ud83c\udfa4 Setup\n1. Add your **postgresql** and **OpenAI** credentials.\n2. Click **Chat** button and start asking questions to your database.\n3. Activate the workflow and you can make the chat publicly available."}, "typeVersion": 1}, {"id": "0df33341-c859-4a54-b6d9-a99670e8d76d", "name": "Chat History", "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow", "position": [120, 160], "parameters": {}, "typeVersion": 1.3}, {"id": "4938b22e-f187-4ca0-b9f1-60835e823799", "name": "Sticky Note3", "type": "n8n-nodes-base.stickyNote", "position": [360, 300], "parameters": {"color": 7, "width": 562, "height": 156, "content": "\ud83d\udee0\ufe0f Tools Used:\n1. Execute SQL Query: Used to execute any query generated by the agent.\n2. Get DB Schema and Tables List: It returns the list of all the tables with its schema name.\n3. Get Table Definition: It returns table details like column names, foreign keys and more of a particular table in a schema."}, "typeVersion": 1}, {"id": "39780c78-4fbc-403e-a220-aa6a4b06df8c", "name": "Sticky Note1", "type": "n8n-nodes-base.stickyNote", "position": [-100, 300], "parameters": {"color": 7, "width": 162, "height": 99, "content": "\ud83d\udc46 You can exchange this with any other chat model of your choice."}, "typeVersion": 1}, {"id": "28a5692c-5003-46cb-9a09-b7867734f446", "name": "Sticky Note2", "type": "n8n-nodes-base.stickyNote", "position": [100, 300], "parameters": {"color": 7, "width": 162, "height": 159, "content": "\ud83d\udc46 You can change how many number of messages to keep using `Context Window Length` option. It's 5 by default."}, "typeVersion": 1}, {"id": "c18ced71-6330-4ba0-9c52-1bb5852b3039", "name": "Execute SQL Query", "type": "n8n-nodes-base.postgresTool", "position": [380, 140], "parameters": {"query": "{{ $fromAI(\"sql_query\", \"SQL Query\") }}", "options": {}, "operation": "executeQuery", "descriptionType": "manual", "toolDescription": "Get all the data from Postgres, make sure you append the tables with correct schema. Every table is associated with some schema in the database."}, "credentials": {"postgres": {"id": "nGI61D0TEEZz18rr", "name": "Your Postgresql Database Credentials"}}, "typeVersion": 2.5}, {"id": "557623c6-e499-48a6-a066-744f64f8b6f3", "name": "Get DB Schema and Tables List", "type": "n8n-nodes-base.postgresTool", "position": [580, 140], "parameters": {"query": "SELECT \n    table_schema,\n    table_name\nFROM information_schema.tables\nWHERE table_type = 'BASE TABLE'\n    AND table_schema NOT IN ('pg_catalog', 'information_schema')\nORDER BY table_schema, table_name;", "options": {}, "operation": "executeQuery", "descriptionType": "manual", "toolDescription": "Get list of all tables with their schema in the database"}, "credentials": {"postgres": {"id": "nGI61D0TEEZz18rr", "name": "Your Postgresql Database Credentials"}}, "typeVersion": 2.5}], "active": false, "pinData": {}, "settings": {"executionOrder": "v1"}, "versionId": "10c7c74e-b383-4ac7-8cb2-c9a15a2818fe", "connections": {"Chat History": {"ai_memory": [[{"node": "AI Agent", "type": "ai_memory", "index": 0}]]}, "Execute SQL Query": {"ai_tool": [[{"node": "AI Agent", "type": "ai_tool", "index": 0}]]}, "OpenAI Chat Model": {"ai_languageModel": [[{"node": "AI Agent", "type": "ai_languageModel", "index": 0}]]}, "Get Table Definition": {"ai_tool": [[{"node": "AI Agent", "type": "ai_tool", "index": 0}]]}, "When chat message received": {"main": [[{"node": "AI Agent", "type": "main", "index": 0}]]}, "Get DB Schema and Tables List": {"ai_tool": [[{"node": "AI Agent", "type": "ai_tool", "index": 0}]]}}}}
{"workflow_name":"OpenAI Chat Model","training_prompts":["Create a workflow that enables users to interact with an OpenAI Chat Model for generating text-based responses to queries.","I need an AI agent that utilizes the OpenAI Chat Model to provide real-time answers to user questions while maintaining context with memory features.","Build me a system to allow users to chat with an OpenAI Chat Model, integrating web search capabilities through SerpAPI for enhanced information retrieval.","Create a workflow that triggers an OpenAI Chat Model response whenever a chat message is received, ensuring seamless communication in a chat environment.","I need an AI agent that combines the OpenAI Chat Model with a memory buffer to maintain conversational context and provide coherent dialogue in a chat application."],"workflow":{"meta":{"instanceId":"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9"},"nodes":[{"id":"939bb301-5e12-4d5b-9a56-61a61cca5f0d","name":"OpenAI Chat Model","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","position":[640,460],"parameters":{"model":"gpt-4o-mini","options":{}},"credentials":{"openAiApi":{"id":"8gccIjcuf3gvaoEr","name":"OpenAi account"}},"typeVersion":1},{"id":"372777e8-ce90-4dea-befc-ac1b2eb4729f","name":"Window Buffer Memory","type":"@n8n/n8n-nodes-langchain.memoryBufferWindow","position":[780,460],"parameters":{},"typeVersion":1.2},{"id":"7a8f0ad1-1c00-4043-b3e5-c88521140a1a","name":"SerpAPI","type":"@n8n/n8n-nodes-langchain.toolSerpApi","position":[920,460],"parameters":{"options":{}},"credentials":{"serpApi":{"id":"aJCKjxx6U3K7ydDe","name":"SerpAPI account"}},"typeVersion":1},{"id":"a7624108-e3da-4193-a625-887314216b8b","name":"When chat message received","type":"@n8n/n8n-nodes-langchain.chatTrigger","position":[360,240],"webhookId":"53c136fe-3e77-4709-a143-fe82746dd8b6","parameters":{"options":{}},"typeVersion":1.1},{"id":"6b8b7de8-fe3f-43b5-97ce-a52a9e44eb5e","name":"AI Agent","type":"@n8n/n8n-nodes-langchain.agent","position":[680,240],"parameters":{"options":{}},"typeVersion":1.6}],"pinData":{},"connections":{"SerpAPI":{"ai_tool":[[{"node":"AI Agent","type":"ai_tool","index":0}]]},"OpenAI Chat Model":{"ai_languageModel":[[{"node":"AI Agent","type":"ai_languageModel","index":0}]]},"Window Buffer Memory":{"ai_memory":[[{"node":"AI Agent","type":"ai_memory","index":0}]]},"When chat message received":{"main":[[{"node":"AI Agent","type":"main","index":0}]]}}}}
{"workflow_name":"Scrape and summarize webpages with AI","training_prompts":["Create a workflow that scrapes and summarizes webpages using AI to provide concise insights from online articles.","I need an AI agent that fetches essays from a specified website and generates summaries of each using natural language processing.","Build me a system to extract titles and key points from multiple essays on Paul Graham's website, then summarize them with an AI model.","Develop a workflow that enables users to automatically retrieve, summarize, and display the latest essays from a given URL for easy reading.","Create a solution that captures web content, summarizes it with AI, and presents the results in a user-friendly format for quick consumption."],"workflow":{"meta":{"instanceId":"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9"},"nodes":[{"id":"67850bd7-f9f4-4d5b-8c9e-bd1451247ba6","name":"When clicking \"Execute Workflow\"","type":"n8n-nodes-base.manualTrigger","position":[-740,1000],"parameters":{},"typeVersion":1},{"id":"0d9133f9-b6d3-4101-95c6-3cd24cdb70c3","name":"Fetch essay list","type":"n8n-nodes-base.httpRequest","position":[-520,1000],"parameters":{"url":"http://www.paulgraham.com/articles.html","options":{}},"typeVersion":4.1},{"id":"ee634297-a456-4f70-a995-55b02950571e","name":"Extract essay names","type":"n8n-nodes-base.html","position":[-300,1000],"parameters":{"options":{},"operation":"extractHtmlContent","dataPropertyName":"=data","extractionValues":{"values":[{"key":"essay","attribute":"href","cssSelector":"table table a","returnArray":true,"returnValue":"attribute"}]}},"typeVersion":1},{"id":"83d75693-dbb8-44c4-8533-da06f611c59c","name":"Fetch essay texts","type":"n8n-nodes-base.httpRequest","position":[360,1000],"parameters":{"url":"=http://www.paulgraham.com/{{ $json.essay }}","options":{}},"typeVersion":4.1},{"id":"151022b5-8570-4176-bf3f-137f27ac7036","name":"Extract title","type":"n8n-nodes-base.html","position":[700,700],"parameters":{"options":{},"operation":"extractHtmlContent","extractionValues":{"values":[{"key":"title","cssSelector":"title"}]}},"typeVersion":1},{"id":"07bcf095-3c4d-4a72-9bcb-341411750ff5","name":"Clean up","type":"n8n-nodes-base.set","position":[1360,980],"parameters":{"fields":{"values":[{"name":"title","stringValue":"={{ $json.title }}"},{"name":"summary","stringValue":"={{ $json.response.text }}"},{"name":"url","stringValue":"=http://www.paulgraham.com/{{ $('Limit to first 3').item.json.essay }}"}]},"include":"none","options":{}},"typeVersion":3},{"id":"11285de0-3c5d-4296-a322-9b7585af9acc","name":"Sticky Note","type":"n8n-nodes-base.stickyNote","position":[-580,920],"parameters":{"width":1071.752021563343,"height":285.66037735849045,"content":"## Scrape latest Paul Graham essays"},"typeVersion":1},{"id":"c32f905d-dd7a-4b68-bbe0-dd8115ee0944","name":"Sticky Note1","type":"n8n-nodes-base.stickyNote","position":[620,920],"parameters":{"width":465.3908355795153,"height":606.7924528301882,"content":"## Summarize them with GPT"},"typeVersion":1},{"id":"29d264f4-df6d-4a41-ab38-58e1b1becc9a","name":"Split out into items","type":"n8n-nodes-base.splitOut","position":[-80,1000],"parameters":{"options":{},"fieldToSplitOut":"essay"},"typeVersion":1},{"id":"ccfa3a1d-f170-44b4-a1f2-3573c88cae98","name":"Limit to first 3","type":"n8n-nodes-base.limit","position":[140,1000],"parameters":{"maxItems":3},"typeVersion":1},{"id":"c3d05068-9d1a-4ef5-8249-e7384dc617ee","name":"Default Data Loader","type":"@n8n/n8n-nodes-langchain.documentDefaultDataLoader","position":[820,1200],"parameters":{"options":{}},"typeVersion":1},{"id":"db75adad-cb16-4e72-b16e-34684a733b05","name":"Recursive Character Text Splitter","type":"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter","position":[820,1340],"parameters":{"options":{}},"typeVersion":1},{"id":"022cc091-9b4c-45c2-bc8e-4037ec2d0d60","name":"OpenAI Chat Model1","type":"@n8n/n8n-nodes-langchain.lmChatOpenAi","position":[680,1200],"parameters":{"model":"gpt-4o-mini","options":{}},"credentials":{"openAiApi":{"id":"8gccIjcuf3gvaoEr","name":"OpenAi account"}},"typeVersion":1},{"id":"cda47bb7-36c5-4d15-a1ef-0c66b1194825","name":"Merge","type":"n8n-nodes-base.merge","position":[1160,980],"parameters":{"mode":"combine","options":{},"combineBy":"combineByPosition"},"typeVersion":3},{"id":"28144e4c-e425-428d-b3d1-f563bfd4e5b3","name":"Summarization Chain","type":"@n8n/n8n-nodes-langchain.chainSummarization","position":[720,1000],"parameters":{"options":{},"operationMode":"documentLoader"},"typeVersion":2}],"pinData":{},"connections":{"Merge":{"main":[[{"node":"Clean up","type":"main","index":0}]]},"Extract title":{"main":[[{"node":"Merge","type":"main","index":0}]]},"Fetch essay list":{"main":[[{"node":"Extract essay names","type":"main","index":0}]]},"Limit to first 3":{"main":[[{"node":"Fetch essay texts","type":"main","index":0}]]},"Fetch essay texts":{"main":[[{"node":"Extract title","type":"main","index":0},{"node":"Summarization Chain","type":"main","index":0}]]},"OpenAI Chat Model1":{"ai_languageModel":[[{"node":"Summarization Chain","type":"ai_languageModel","index":0}]]},"Default Data Loader":{"ai_document":[[{"node":"Summarization Chain","type":"ai_document","index":0}]]},"Extract essay names":{"main":[[{"node":"Split out into items","type":"main","index":0}]]},"Summarization Chain":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Split out into items":{"main":[[{"node":"Limit to first 3","type":"main","index":0}]]},"When clicking \"Execute Workflow\"":{"main":[[{"node":"Fetch essay list","type":"main","index":0}]]},"Recursive Character Text Splitter":{"ai_textSplitter":[[{"node":"Default Data Loader","type":"ai_textSplitter","index":0}]]}}}}
