{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "How can I automate product catalog queries using WhatsApp and AI in an N8N workflow?"}, {"role": "assistant", "content": "{\"meta\": {\"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"}, \"name\": \"WhatsApp Trigger\", \"description\": \"This n8n template builds a simple WhatsApp chabot acting as a Sales Agent. The Agent is backed by a product catalog vector store to better answer user's questions. This template is intended to help introduce n8n users interested in building with WhatsApp. How it works This template is in 2 parts: creating the product catalog vector store and building the WhatsApp AI chatbot. A product brochure is imported via HTTP request node and its text contents extracted. The text contents are then uploaded to the in-memory vector store to build a knowledgebase for the chatbot. A WhatsApp trigger is used to capture messages from customers where non-text messages are filtered out. The customer's message is sent to the AI Agent which queries the product catalogue using the vector store tool. The Agent's response is sent back to the user via the WhatsApp node. How to use Once you've setup and configured your WhatsApp account and credentials First, populate the vector store by clicking the \\\"Test Workflow\\\" button. Next, activate the workflow to enable the WhatsApp chatbot. Message your designated WhatsApp number and you should receive a message from the AI sales agent. Tweak datasource and behaviour as required. Requirements WhatsApp Business Account OpenAI for LLM Customising this workflow Upgrade the vector store to Qdrant for persistance and production use-cases. Handle different WhatsApp message types for a more rich and engaging experience for customers.\", \"nodes\": [{\"id\": \"77ee6494-4898-47dc-81d9-35daf6f0beea\", \"name\": \"WhatsApp Trigger\", \"type\": \"n8n-nodes-base.whatsAppTrigger\", \"position\": [1360, -280], \"webhookId\": \"aaa71f03-f7af-4d18-8d9a-0afb86f1b554\", \"parameters\": {\"updates\": [\"messages\"]}, \"credentials\": {\"whatsAppTriggerApi\": {\"id\": \"H3uYNtpeczKMqtYm\", \"name\": \"WhatsApp OAuth account\"}}, \"typeVersion\": 1}, {\"id\": \"57210e27-1f89-465a-98cc-43f890a4bf58\", \"name\": \"OpenAI Chat Model\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [1960, -200], \"parameters\": {\"model\": \"gpt-4o-2024-08-06\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"e1053235-0ade-4e36-9ad2-8b29c78fced8\", \"name\": \"Window Buffer Memory\", \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\", \"position\": [2080, -200], \"parameters\": {\"sessionKey\": \"=whatsapp-75-{{ $json.messages[0].from }}\", \"sessionIdType\": \"customKey\"}, \"typeVersion\": 1.2}, {\"id\": \"69f1b78b-7c93-4713-863a-27e04809996f\", \"name\": \"Vector Store Tool\", \"type\": \"@n8n/n8n-nodes-langchain.toolVectorStore\", \"position\": [2200, -200], \"parameters\": {\"name\": \"query_product_brochure\", \"description\": \"Call this tool to query the product brochure. Valid for the year 2024.\"}, \"typeVersion\": 1}, {\"id\": \"170e8f7d-7e14-48dd-9f80-5352cc411fc1\", \"name\": \"Embeddings OpenAI\", \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\", \"position\": [2200, 80], \"parameters\": {\"model\": \"text-embedding-3-small\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"ee78320b-d407-49e8-b4b8-417582a44709\", \"name\": \"OpenAI Chat Model1\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [2440, -60], \"parameters\": {\"model\": \"gpt-4o-2024-08-06\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"9dd89378-5acf-4ca6-8d84-e6e64254ed02\", \"name\": \"When clicking \\u2018Test workflow\\u2019\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [0, -240], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"e68fc137-1bcb-43f0-b597-3ae07f380c15\", \"name\": \"Embeddings OpenAI1\", \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\", \"position\": [760, -20], \"parameters\": {\"model\": \"text-embedding-3-small\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"2d31e92b-18d4-4f6b-8cdb-bed0056d50d7\", \"name\": \"Default Data Loader\", \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\", \"position\": [900, -20], \"parameters\": {\"options\": {}, \"jsonData\": \"={{ $('Extract from File').item.json.text }}\", \"jsonMode\": \"expressionData\"}, \"typeVersion\": 1}, {\"id\": \"ca0c015e-fba2-4dca-b0fe-bac66681725a\", \"name\": \"Recursive Character Text Splitter\", \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\", \"position\": [900, 100], \"parameters\": {\"options\": {}, \"chunkSize\": 2000, \"chunkOverlap\": {}}, \"typeVersion\": 1}, {\"id\": \"63abb6b2-b955-4e65-9c63-3211dca65613\", \"name\": \"Extract from File\", \"type\": \"n8n-nodes-base.extractFromFile\", \"position\": [360, -240], \"parameters\": {\"options\": {}, \"operation\": \"pdf\"}, \"typeVersion\": 1}, {\"id\": \"be2add9c-3670-4196-8c38-82742bf4f283\", \"name\": \"get Product Brochure\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [180, -240], \"parameters\": {\"url\": \"https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf\", \"options\": {}}, \"typeVersion\": 4.2}, {\"id\": \"1ae5a311-36d7-4454-ab14-6788d1331780\", \"name\": \"Reply To User\", \"type\": \"n8n-nodes-base.whatsApp\", \"position\": [2820, -280], \"parameters\": {\"textBody\": \"={{ $json.output }}\", \"operation\": \"send\", \"phoneNumberId\": \"477115632141067\", \"requestOptions\": {}, \"additionalFields\": {\"previewUrl\": false}, \"recipientPhoneNumber\": \"={{ $('WhatsApp Trigger').item.json.messages[0].from }}\"}, \"credentials\": {\"whatsAppApi\": {\"id\": \"9SFJPeqrpChOkAmw\", \"name\": \"WhatsApp account\"}}, \"typeVersion\": 1}, {\"id\": \"b6efba81-18b0-4378-bb91-51f39ca57f3e\", \"name\": \"Reply To User1\", \"type\": \"n8n-nodes-base.whatsApp\", \"position\": [1760, 80], \"parameters\": {\"textBody\": \"=I'm unable to process non-text messages. Please send only text messages. Thanks!\", \"operation\": \"send\", \"phoneNumberId\": \"477115632141067\", \"requestOptions\": {}, \"additionalFields\": {\"previewUrl\": false}, \"recipientPhoneNumber\": \"={{ $('WhatsApp Trigger').item.json.messages[0].from }}\"}, \"credentials\": {\"whatsAppApi\": {\"id\": \"9SFJPeqrpChOkAmw\", \"name\": \"WhatsApp account\"}}, \"typeVersion\": 1}, {\"id\": \"52decd86-ac6c-4d91-a938-86f93ec5f822\", \"name\": \"Product Catalogue\", \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreInMemory\", \"position\": [2200, -60], \"parameters\": {\"memoryKey\": \"whatsapp-75\"}, \"typeVersion\": 1}, {\"id\": \"6dd5a652-2464-4ab8-8e5f-568529299523\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-88.75, -473.4375], \"parameters\": {\"color\": 7, \"width\": 640.4375, \"height\": 434.6875, \"content\": \"## 1. Download Product Brochure PDF\\n[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\\n\\nImport your marketing PDF document to build your vector store. This will be used as the knowledgebase by the Sales AI Agent.\\n\\nFor this demonstration, we'll use the HTTP request node to import the YAMAHA POWERED LOUDSPEAKERS 2024 brochure ([Source](https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf)) and an Extract from File node to extract the text contents. \"}, \"typeVersion\": 1}, {\"id\": \"116663bc-d8d6-41a5-93dc-b219adbb2235\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [580, -476], \"parameters\": {\"color\": 7, \"width\": 614.6875, \"height\": 731.1875, \"content\": \"## 2. Create Product Brochure Vector Store\\n[Read more about the In-Memory Vector Store](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/)\\n\\nVector stores are powerful databases which serve the purpose of matching a user's questions to relevant parts of a document. By creating a vector store of our product catalog, we'll allow users to query using natural language.\\n\\nTo keep things simple, we'll use the **In-memory Vector Store** which comes built-in to n8n and doesn't require a separate service. For production deployments, I'd recommend replacing the in-memory vector store with either [Qdrant](https://qdrant.tech) or [Pinecone](https://pinecone.io).\"}, \"typeVersion\": 1}, {\"id\": \"86bd5334-d735-4650-aeff-06230119d705\", \"name\": \"Create Product Catalogue\", \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreInMemory\", \"position\": [760, -200], \"parameters\": {\"mode\": \"insert\", \"memoryKey\": \"whatsapp-75\", \"clearStore\": true}, \"typeVersion\": 1}, {\"id\": \"b8078b0d-cbd7-423f-bb30-13902988be38\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1254, -552], \"parameters\": {\"color\": 7, \"width\": 546.6875, \"height\": 484.1875, \"content\": \"## 3. Use the WhatsApp Trigger\\n[Learn more about the WhatsApp Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger/)\\n\\nThe WhatsApp Trigger allows you to receive incoming WhatsApp messages from customers. It requires a bit of setup so remember to follow the documentation carefully! Once ready however, it's quite easy to build powerful workflows which are easily accessible to users.\\n\\nNote that WhatsApp can send many message types such as audio and video so in this demonstration, we'll filter them out and just accept the text messages.\"}, \"typeVersion\": 1}, {\"id\": \"5bf7ed07-282b-4198-aa90-3e5ae5180404\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1640, 280], \"parameters\": {\"width\": 338, \"height\": 92, \"content\": \"### Want to handle all message types?\\nCheck out my other WhatsApp template in my creator page! https://n8n.io/creators/jimleuk/\"}, \"typeVersion\": 1}, {\"id\": \"a3661b59-25d2-446e-8462-32b4d692b69d\", \"name\": \"Sticky Note4\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1640, -40], \"parameters\": {\"color\": 7, \"width\": 337.6875, \"height\": 311.1875, \"content\": \"### 3a. Handle Unsupported Message Types\\nFor non-text messages, we'll just reply with a simple message to inform the sender.\"}, \"typeVersion\": 1}, {\"id\": \"ea3c9ee1-505a-40e7-82fe-9169bdbb80af\", \"name\": \"Sticky Note5\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1840, -682.5], \"parameters\": {\"color\": 7, \"width\": 746.6875, \"height\": 929.1875, \"content\": \"## 4. Sales AI Agent Responds To Customers\\n[Learn more about using AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\\n\\nn8n's AI agents are powerful nodes which make it incredibly easy to use state-of-the-art AI in your workflows. Not only do they have the ability to remember conversations per individual customer but also tap into resources such as our product catalogue vector store to pull factual information and data for every question.\\n\\nIn this demonstration, we use an AI agent which is directed to help the user navigate the product brochure. A Chat memory subnode is attached to identify and keep track of the customer session. A Vector store tool is added to allow the Agent to tap into the product catalogue knowledgebase we built earlier.\"}, \"typeVersion\": 1}, {\"id\": \"5c72df8d-bca1-4634-b1ed-61ffec8bd103\", \"name\": \"Sticky Note6\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2620, -560], \"parameters\": {\"color\": 7, \"width\": 495.4375, \"height\": 484.1875, \"content\": \"## 5. Repond to WhatsApp User\\n[Learn more about the WhatsApp Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/)\\n\\nThe WhatsApp node is the go-to if you want to interact with WhatsApp users. With this node, you can send text, images, audio and video messages as well as use your WhatsApp message templates.\\n\\nHere, we'll keep it simple by replying with a text message which is the output of the AI agent.\"}, \"typeVersion\": 1}, {\"id\": \"48ec809f-ca0e-4052-b403-9ad7077b3fff\", \"name\": \"Sticky Note7\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-520, -620], \"parameters\": {\"width\": 401.25, \"height\": 582.6283033962263, \"content\": \"## Try It Out!\\n\\n### This n8n template builds a simple WhatsApp chabot acting as a Sales Agent. The Agent is backed by a product catalog vector store to better answer user's questions.\\n\\n* This template is in 2 parts: creating the product catalog vector store and building the WhatsApp AI chatbot.\\n* A product brochure is imported via HTTP request node and its text contents extracted.\\n* The text contents are then uploaded to the in-memory vector store to build a knowledgebase for the chatbot.\\n* A WhatsApp trigger is used to capture messages from customers where non-text messages are filtered out.\\n* The customer's message is sent to the AI Agent which queries the product catalogue using the vector store tool.\\n* The Agent's response is sent back to the user via the WhatsApp node.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\"}, \"typeVersion\": 1}, {\"id\": \"87cf9b41-66de-49a7-aeb0-c8809191b5a0\", \"name\": \"Handle Message Types\", \"type\": \"n8n-nodes-base.switch\", \"position\": [1560, -280], \"parameters\": {\"rules\": {\"values\": [{\"outputKey\": \"Supported\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"operator\": {\"type\": \"string\", \"operation\": \"equals\"}, \"leftValue\": \"={{ $json.messages[0].type }}\", \"rightValue\": \"text\"}]}, \"renameOutput\": true}, {\"outputKey\": \"Not Supported\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"id\": \"89971d8c-a386-4e77-8f6c-f491a8e84cb6\", \"operator\": {\"type\": \"string\", \"operation\": \"notEquals\"}, \"leftValue\": \"={{ $json.messages[0].type }}\", \"rightValue\": \"text\"}]}, \"renameOutput\": true}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"e52f0a50-0c34-4c4a-b493-4c42ba112277\", \"name\": \"Sticky Note8\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-80, -20], \"parameters\": {\"color\": 5, \"width\": 345.10906976744184, \"height\": 114.53583720930231, \"content\": \"### You only have to run this part once!\\nRun this step to populate our product catalogue vector. Run again if you want to update the vector store with a new version.\"}, \"typeVersion\": 1}, {\"id\": \"c1a7d6d1-191e-4343-af9f-f2c9eb4ecf49\", \"name\": \"Sticky Note9\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1260, -40], \"parameters\": {\"color\": 5, \"width\": 364.6293255813954, \"height\": 107.02804651162779, \"content\": \"### Activate your workflow to use!\\nTo start using the WhatsApp chatbot, you'll need to activate the workflow. If you are self-hosting ensure WhatsApp is able to connect to your server.\"}, \"typeVersion\": 1}, {\"id\": \"a36524d0-22a6-48cc-93fe-b4571cec428a\", \"name\": \"AI Sales Agent\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"position\": [1960, -400], \"parameters\": {\"text\": \"={{ $json.messages[0].text.body }}\", \"options\": {\"systemMessage\": \"You are an assistant working for a company who sells Yamaha Powered Loudspeakers and helping the user navigate the product catalog for the year 2024. Your goal is not to facilitate a sale but if the user enquires, direct them to the appropriate website, url or contact information.\\n\\nDo your best to answer any questions factually. If you don't know the answer or unable to obtain the information from the datastore, then tell the user so.\"}, \"promptType\": \"define\"}, \"typeVersion\": 1.6}], \"pinData\": {}, \"connections\": {\"AI Sales Agent\": {\"main\": [[{\"node\": \"Reply To User\", \"type\": \"main\", \"index\": 0}]]}, \"WhatsApp Trigger\": {\"main\": [[{\"node\": \"Handle Message Types\", \"type\": \"main\", \"index\": 0}]]}, \"Embeddings OpenAI\": {\"ai_embedding\": [[{\"node\": \"Product Catalogue\", \"type\": \"ai_embedding\", \"index\": 0}]]}, \"Extract from File\": {\"main\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"main\", \"index\": 0}]]}, \"OpenAI Chat Model\": {\"ai_languageModel\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Product Catalogue\": {\"ai_vectorStore\": [[{\"node\": \"Vector Store Tool\", \"type\": \"ai_vectorStore\", \"index\": 0}]]}, \"Vector Store Tool\": {\"ai_tool\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"Embeddings OpenAI1\": {\"ai_embedding\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"ai_embedding\", \"index\": 0}]]}, \"OpenAI Chat Model1\": {\"ai_languageModel\": [[{\"node\": \"Vector Store Tool\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Default Data Loader\": {\"ai_document\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"ai_document\", \"index\": 0}]]}, \"Handle Message Types\": {\"main\": [[{\"node\": \"AI Sales Agent\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Reply To User1\", \"type\": \"main\", \"index\": 0}]]}, \"Window Buffer Memory\": {\"ai_memory\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_memory\", \"index\": 0}]]}, \"get Product Brochure\": {\"main\": [[{\"node\": \"Extract from File\", \"type\": \"main\", \"index\": 0}]]}, \"Recursive Character Text Splitter\": {\"ai_textSplitter\": [[{\"node\": \"Default Data Loader\", \"type\": \"ai_textSplitter\", \"index\": 0}]]}, \"When clicking \\u2018Test workflow\\u2019\": {\"main\": [[{\"node\": \"get Product Brochure\", \"type\": \"main\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "Show me a workflow that integrates WhatsApp messages with OpenAI to create an interactive sales agent."}, {"role": "assistant", "content": "{\"meta\": {\"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"}, \"name\": \"WhatsApp Trigger\", \"description\": \"This n8n template builds a simple WhatsApp chabot acting as a Sales Agent. The Agent is backed by a product catalog vector store to better answer user's questions. This template is intended to help introduce n8n users interested in building with WhatsApp. How it works This template is in 2 parts: creating the product catalog vector store and building the WhatsApp AI chatbot. A product brochure is imported via HTTP request node and its text contents extracted. The text contents are then uploaded to the in-memory vector store to build a knowledgebase for the chatbot. A WhatsApp trigger is used to capture messages from customers where non-text messages are filtered out. The customer's message is sent to the AI Agent which queries the product catalogue using the vector store tool. The Agent's response is sent back to the user via the WhatsApp node. How to use Once you've setup and configured your WhatsApp account and credentials First, populate the vector store by clicking the \\\"Test Workflow\\\" button. Next, activate the workflow to enable the WhatsApp chatbot. Message your designated WhatsApp number and you should receive a message from the AI sales agent. Tweak datasource and behaviour as required. Requirements WhatsApp Business Account OpenAI for LLM Customising this workflow Upgrade the vector store to Qdrant for persistance and production use-cases. Handle different WhatsApp message types for a more rich and engaging experience for customers.\", \"nodes\": [{\"id\": \"77ee6494-4898-47dc-81d9-35daf6f0beea\", \"name\": \"WhatsApp Trigger\", \"type\": \"n8n-nodes-base.whatsAppTrigger\", \"position\": [1360, -280], \"webhookId\": \"aaa71f03-f7af-4d18-8d9a-0afb86f1b554\", \"parameters\": {\"updates\": [\"messages\"]}, \"credentials\": {\"whatsAppTriggerApi\": {\"id\": \"H3uYNtpeczKMqtYm\", \"name\": \"WhatsApp OAuth account\"}}, \"typeVersion\": 1}, {\"id\": \"57210e27-1f89-465a-98cc-43f890a4bf58\", \"name\": \"OpenAI Chat Model\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [1960, -200], \"parameters\": {\"model\": \"gpt-4o-2024-08-06\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"e1053235-0ade-4e36-9ad2-8b29c78fced8\", \"name\": \"Window Buffer Memory\", \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\", \"position\": [2080, -200], \"parameters\": {\"sessionKey\": \"=whatsapp-75-{{ $json.messages[0].from }}\", \"sessionIdType\": \"customKey\"}, \"typeVersion\": 1.2}, {\"id\": \"69f1b78b-7c93-4713-863a-27e04809996f\", \"name\": \"Vector Store Tool\", \"type\": \"@n8n/n8n-nodes-langchain.toolVectorStore\", \"position\": [2200, -200], \"parameters\": {\"name\": \"query_product_brochure\", \"description\": \"Call this tool to query the product brochure. Valid for the year 2024.\"}, \"typeVersion\": 1}, {\"id\": \"170e8f7d-7e14-48dd-9f80-5352cc411fc1\", \"name\": \"Embeddings OpenAI\", \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\", \"position\": [2200, 80], \"parameters\": {\"model\": \"text-embedding-3-small\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"ee78320b-d407-49e8-b4b8-417582a44709\", \"name\": \"OpenAI Chat Model1\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [2440, -60], \"parameters\": {\"model\": \"gpt-4o-2024-08-06\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"9dd89378-5acf-4ca6-8d84-e6e64254ed02\", \"name\": \"When clicking \\u2018Test workflow\\u2019\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [0, -240], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"e68fc137-1bcb-43f0-b597-3ae07f380c15\", \"name\": \"Embeddings OpenAI1\", \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\", \"position\": [760, -20], \"parameters\": {\"model\": \"text-embedding-3-small\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"2d31e92b-18d4-4f6b-8cdb-bed0056d50d7\", \"name\": \"Default Data Loader\", \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\", \"position\": [900, -20], \"parameters\": {\"options\": {}, \"jsonData\": \"={{ $('Extract from File').item.json.text }}\", \"jsonMode\": \"expressionData\"}, \"typeVersion\": 1}, {\"id\": \"ca0c015e-fba2-4dca-b0fe-bac66681725a\", \"name\": \"Recursive Character Text Splitter\", \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\", \"position\": [900, 100], \"parameters\": {\"options\": {}, \"chunkSize\": 2000, \"chunkOverlap\": {}}, \"typeVersion\": 1}, {\"id\": \"63abb6b2-b955-4e65-9c63-3211dca65613\", \"name\": \"Extract from File\", \"type\": \"n8n-nodes-base.extractFromFile\", \"position\": [360, -240], \"parameters\": {\"options\": {}, \"operation\": \"pdf\"}, \"typeVersion\": 1}, {\"id\": \"be2add9c-3670-4196-8c38-82742bf4f283\", \"name\": \"get Product Brochure\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [180, -240], \"parameters\": {\"url\": \"https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf\", \"options\": {}}, \"typeVersion\": 4.2}, {\"id\": \"1ae5a311-36d7-4454-ab14-6788d1331780\", \"name\": \"Reply To User\", \"type\": \"n8n-nodes-base.whatsApp\", \"position\": [2820, -280], \"parameters\": {\"textBody\": \"={{ $json.output }}\", \"operation\": \"send\", \"phoneNumberId\": \"477115632141067\", \"requestOptions\": {}, \"additionalFields\": {\"previewUrl\": false}, \"recipientPhoneNumber\": \"={{ $('WhatsApp Trigger').item.json.messages[0].from }}\"}, \"credentials\": {\"whatsAppApi\": {\"id\": \"9SFJPeqrpChOkAmw\", \"name\": \"WhatsApp account\"}}, \"typeVersion\": 1}, {\"id\": \"b6efba81-18b0-4378-bb91-51f39ca57f3e\", \"name\": \"Reply To User1\", \"type\": \"n8n-nodes-base.whatsApp\", \"position\": [1760, 80], \"parameters\": {\"textBody\": \"=I'm unable to process non-text messages. Please send only text messages. Thanks!\", \"operation\": \"send\", \"phoneNumberId\": \"477115632141067\", \"requestOptions\": {}, \"additionalFields\": {\"previewUrl\": false}, \"recipientPhoneNumber\": \"={{ $('WhatsApp Trigger').item.json.messages[0].from }}\"}, \"credentials\": {\"whatsAppApi\": {\"id\": \"9SFJPeqrpChOkAmw\", \"name\": \"WhatsApp account\"}}, \"typeVersion\": 1}, {\"id\": \"52decd86-ac6c-4d91-a938-86f93ec5f822\", \"name\": \"Product Catalogue\", \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreInMemory\", \"position\": [2200, -60], \"parameters\": {\"memoryKey\": \"whatsapp-75\"}, \"typeVersion\": 1}, {\"id\": \"6dd5a652-2464-4ab8-8e5f-568529299523\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-88.75, -473.4375], \"parameters\": {\"color\": 7, \"width\": 640.4375, \"height\": 434.6875, \"content\": \"## 1. Download Product Brochure PDF\\n[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\\n\\nImport your marketing PDF document to build your vector store. This will be used as the knowledgebase by the Sales AI Agent.\\n\\nFor this demonstration, we'll use the HTTP request node to import the YAMAHA POWERED LOUDSPEAKERS 2024 brochure ([Source](https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf)) and an Extract from File node to extract the text contents. \"}, \"typeVersion\": 1}, {\"id\": \"116663bc-d8d6-41a5-93dc-b219adbb2235\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [580, -476], \"parameters\": {\"color\": 7, \"width\": 614.6875, \"height\": 731.1875, \"content\": \"## 2. Create Product Brochure Vector Store\\n[Read more about the In-Memory Vector Store](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/)\\n\\nVector stores are powerful databases which serve the purpose of matching a user's questions to relevant parts of a document. By creating a vector store of our product catalog, we'll allow users to query using natural language.\\n\\nTo keep things simple, we'll use the **In-memory Vector Store** which comes built-in to n8n and doesn't require a separate service. For production deployments, I'd recommend replacing the in-memory vector store with either [Qdrant](https://qdrant.tech) or [Pinecone](https://pinecone.io).\"}, \"typeVersion\": 1}, {\"id\": \"86bd5334-d735-4650-aeff-06230119d705\", \"name\": \"Create Product Catalogue\", \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreInMemory\", \"position\": [760, -200], \"parameters\": {\"mode\": \"insert\", \"memoryKey\": \"whatsapp-75\", \"clearStore\": true}, \"typeVersion\": 1}, {\"id\": \"b8078b0d-cbd7-423f-bb30-13902988be38\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1254, -552], \"parameters\": {\"color\": 7, \"width\": 546.6875, \"height\": 484.1875, \"content\": \"## 3. Use the WhatsApp Trigger\\n[Learn more about the WhatsApp Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger/)\\n\\nThe WhatsApp Trigger allows you to receive incoming WhatsApp messages from customers. It requires a bit of setup so remember to follow the documentation carefully! Once ready however, it's quite easy to build powerful workflows which are easily accessible to users.\\n\\nNote that WhatsApp can send many message types such as audio and video so in this demonstration, we'll filter them out and just accept the text messages.\"}, \"typeVersion\": 1}, {\"id\": \"5bf7ed07-282b-4198-aa90-3e5ae5180404\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1640, 280], \"parameters\": {\"width\": 338, \"height\": 92, \"content\": \"### Want to handle all message types?\\nCheck out my other WhatsApp template in my creator page! https://n8n.io/creators/jimleuk/\"}, \"typeVersion\": 1}, {\"id\": \"a3661b59-25d2-446e-8462-32b4d692b69d\", \"name\": \"Sticky Note4\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1640, -40], \"parameters\": {\"color\": 7, \"width\": 337.6875, \"height\": 311.1875, \"content\": \"### 3a. Handle Unsupported Message Types\\nFor non-text messages, we'll just reply with a simple message to inform the sender.\"}, \"typeVersion\": 1}, {\"id\": \"ea3c9ee1-505a-40e7-82fe-9169bdbb80af\", \"name\": \"Sticky Note5\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1840, -682.5], \"parameters\": {\"color\": 7, \"width\": 746.6875, \"height\": 929.1875, \"content\": \"## 4. Sales AI Agent Responds To Customers\\n[Learn more about using AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\\n\\nn8n's AI agents are powerful nodes which make it incredibly easy to use state-of-the-art AI in your workflows. Not only do they have the ability to remember conversations per individual customer but also tap into resources such as our product catalogue vector store to pull factual information and data for every question.\\n\\nIn this demonstration, we use an AI agent which is directed to help the user navigate the product brochure. A Chat memory subnode is attached to identify and keep track of the customer session. A Vector store tool is added to allow the Agent to tap into the product catalogue knowledgebase we built earlier.\"}, \"typeVersion\": 1}, {\"id\": \"5c72df8d-bca1-4634-b1ed-61ffec8bd103\", \"name\": \"Sticky Note6\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2620, -560], \"parameters\": {\"color\": 7, \"width\": 495.4375, \"height\": 484.1875, \"content\": \"## 5. Repond to WhatsApp User\\n[Learn more about the WhatsApp Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/)\\n\\nThe WhatsApp node is the go-to if you want to interact with WhatsApp users. With this node, you can send text, images, audio and video messages as well as use your WhatsApp message templates.\\n\\nHere, we'll keep it simple by replying with a text message which is the output of the AI agent.\"}, \"typeVersion\": 1}, {\"id\": \"48ec809f-ca0e-4052-b403-9ad7077b3fff\", \"name\": \"Sticky Note7\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-520, -620], \"parameters\": {\"width\": 401.25, \"height\": 582.6283033962263, \"content\": \"## Try It Out!\\n\\n### This n8n template builds a simple WhatsApp chabot acting as a Sales Agent. The Agent is backed by a product catalog vector store to better answer user's questions.\\n\\n* This template is in 2 parts: creating the product catalog vector store and building the WhatsApp AI chatbot.\\n* A product brochure is imported via HTTP request node and its text contents extracted.\\n* The text contents are then uploaded to the in-memory vector store to build a knowledgebase for the chatbot.\\n* A WhatsApp trigger is used to capture messages from customers where non-text messages are filtered out.\\n* The customer's message is sent to the AI Agent which queries the product catalogue using the vector store tool.\\n* The Agent's response is sent back to the user via the WhatsApp node.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\"}, \"typeVersion\": 1}, {\"id\": \"87cf9b41-66de-49a7-aeb0-c8809191b5a0\", \"name\": \"Handle Message Types\", \"type\": \"n8n-nodes-base.switch\", \"position\": [1560, -280], \"parameters\": {\"rules\": {\"values\": [{\"outputKey\": \"Supported\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"operator\": {\"type\": \"string\", \"operation\": \"equals\"}, \"leftValue\": \"={{ $json.messages[0].type }}\", \"rightValue\": \"text\"}]}, \"renameOutput\": true}, {\"outputKey\": \"Not Supported\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"id\": \"89971d8c-a386-4e77-8f6c-f491a8e84cb6\", \"operator\": {\"type\": \"string\", \"operation\": \"notEquals\"}, \"leftValue\": \"={{ $json.messages[0].type }}\", \"rightValue\": \"text\"}]}, \"renameOutput\": true}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"e52f0a50-0c34-4c4a-b493-4c42ba112277\", \"name\": \"Sticky Note8\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-80, -20], \"parameters\": {\"color\": 5, \"width\": 345.10906976744184, \"height\": 114.53583720930231, \"content\": \"### You only have to run this part once!\\nRun this step to populate our product catalogue vector. Run again if you want to update the vector store with a new version.\"}, \"typeVersion\": 1}, {\"id\": \"c1a7d6d1-191e-4343-af9f-f2c9eb4ecf49\", \"name\": \"Sticky Note9\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1260, -40], \"parameters\": {\"color\": 5, \"width\": 364.6293255813954, \"height\": 107.02804651162779, \"content\": \"### Activate your workflow to use!\\nTo start using the WhatsApp chatbot, you'll need to activate the workflow. If you are self-hosting ensure WhatsApp is able to connect to your server.\"}, \"typeVersion\": 1}, {\"id\": \"a36524d0-22a6-48cc-93fe-b4571cec428a\", \"name\": \"AI Sales Agent\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"position\": [1960, -400], \"parameters\": {\"text\": \"={{ $json.messages[0].text.body }}\", \"options\": {\"systemMessage\": \"You are an assistant working for a company who sells Yamaha Powered Loudspeakers and helping the user navigate the product catalog for the year 2024. Your goal is not to facilitate a sale but if the user enquires, direct them to the appropriate website, url or contact information.\\n\\nDo your best to answer any questions factually. If you don't know the answer or unable to obtain the information from the datastore, then tell the user so.\"}, \"promptType\": \"define\"}, \"typeVersion\": 1.6}], \"pinData\": {}, \"connections\": {\"AI Sales Agent\": {\"main\": [[{\"node\": \"Reply To User\", \"type\": \"main\", \"index\": 0}]]}, \"WhatsApp Trigger\": {\"main\": [[{\"node\": \"Handle Message Types\", \"type\": \"main\", \"index\": 0}]]}, \"Embeddings OpenAI\": {\"ai_embedding\": [[{\"node\": \"Product Catalogue\", \"type\": \"ai_embedding\", \"index\": 0}]]}, \"Extract from File\": {\"main\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"main\", \"index\": 0}]]}, \"OpenAI Chat Model\": {\"ai_languageModel\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Product Catalogue\": {\"ai_vectorStore\": [[{\"node\": \"Vector Store Tool\", \"type\": \"ai_vectorStore\", \"index\": 0}]]}, \"Vector Store Tool\": {\"ai_tool\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"Embeddings OpenAI1\": {\"ai_embedding\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"ai_embedding\", \"index\": 0}]]}, \"OpenAI Chat Model1\": {\"ai_languageModel\": [[{\"node\": \"Vector Store Tool\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Default Data Loader\": {\"ai_document\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"ai_document\", \"index\": 0}]]}, \"Handle Message Types\": {\"main\": [[{\"node\": \"AI Sales Agent\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Reply To User1\", \"type\": \"main\", \"index\": 0}]]}, \"Window Buffer Memory\": {\"ai_memory\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_memory\", \"index\": 0}]]}, \"get Product Brochure\": {\"main\": [[{\"node\": \"Extract from File\", \"type\": \"main\", \"index\": 0}]]}, \"Recursive Character Text Splitter\": {\"ai_textSplitter\": [[{\"node\": \"Default Data Loader\", \"type\": \"ai_textSplitter\", \"index\": 0}]]}, \"When clicking \\u2018Test workflow\\u2019\": {\"main\": [[{\"node\": \"get Product Brochure\", \"type\": \"main\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "What N8N workflow can handle WhatsApp triggers and leverage AI for product information retrieval and user interaction?"}, {"role": "assistant", "content": "{\"meta\": {\"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"}, \"name\": \"WhatsApp Trigger\", \"description\": \"This n8n template builds a simple WhatsApp chabot acting as a Sales Agent. The Agent is backed by a product catalog vector store to better answer user's questions. This template is intended to help introduce n8n users interested in building with WhatsApp. How it works This template is in 2 parts: creating the product catalog vector store and building the WhatsApp AI chatbot. A product brochure is imported via HTTP request node and its text contents extracted. The text contents are then uploaded to the in-memory vector store to build a knowledgebase for the chatbot. A WhatsApp trigger is used to capture messages from customers where non-text messages are filtered out. The customer's message is sent to the AI Agent which queries the product catalogue using the vector store tool. The Agent's response is sent back to the user via the WhatsApp node. How to use Once you've setup and configured your WhatsApp account and credentials First, populate the vector store by clicking the \\\"Test Workflow\\\" button. Next, activate the workflow to enable the WhatsApp chatbot. Message your designated WhatsApp number and you should receive a message from the AI sales agent. Tweak datasource and behaviour as required. Requirements WhatsApp Business Account OpenAI for LLM Customising this workflow Upgrade the vector store to Qdrant for persistance and production use-cases. Handle different WhatsApp message types for a more rich and engaging experience for customers.\", \"nodes\": [{\"id\": \"77ee6494-4898-47dc-81d9-35daf6f0beea\", \"name\": \"WhatsApp Trigger\", \"type\": \"n8n-nodes-base.whatsAppTrigger\", \"position\": [1360, -280], \"webhookId\": \"aaa71f03-f7af-4d18-8d9a-0afb86f1b554\", \"parameters\": {\"updates\": [\"messages\"]}, \"credentials\": {\"whatsAppTriggerApi\": {\"id\": \"H3uYNtpeczKMqtYm\", \"name\": \"WhatsApp OAuth account\"}}, \"typeVersion\": 1}, {\"id\": \"57210e27-1f89-465a-98cc-43f890a4bf58\", \"name\": \"OpenAI Chat Model\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [1960, -200], \"parameters\": {\"model\": \"gpt-4o-2024-08-06\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"e1053235-0ade-4e36-9ad2-8b29c78fced8\", \"name\": \"Window Buffer Memory\", \"type\": \"@n8n/n8n-nodes-langchain.memoryBufferWindow\", \"position\": [2080, -200], \"parameters\": {\"sessionKey\": \"=whatsapp-75-{{ $json.messages[0].from }}\", \"sessionIdType\": \"customKey\"}, \"typeVersion\": 1.2}, {\"id\": \"69f1b78b-7c93-4713-863a-27e04809996f\", \"name\": \"Vector Store Tool\", \"type\": \"@n8n/n8n-nodes-langchain.toolVectorStore\", \"position\": [2200, -200], \"parameters\": {\"name\": \"query_product_brochure\", \"description\": \"Call this tool to query the product brochure. Valid for the year 2024.\"}, \"typeVersion\": 1}, {\"id\": \"170e8f7d-7e14-48dd-9f80-5352cc411fc1\", \"name\": \"Embeddings OpenAI\", \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\", \"position\": [2200, 80], \"parameters\": {\"model\": \"text-embedding-3-small\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"ee78320b-d407-49e8-b4b8-417582a44709\", \"name\": \"OpenAI Chat Model1\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [2440, -60], \"parameters\": {\"model\": \"gpt-4o-2024-08-06\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"9dd89378-5acf-4ca6-8d84-e6e64254ed02\", \"name\": \"When clicking \\u2018Test workflow\\u2019\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [0, -240], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"e68fc137-1bcb-43f0-b597-3ae07f380c15\", \"name\": \"Embeddings OpenAI1\", \"type\": \"@n8n/n8n-nodes-langchain.embeddingsOpenAi\", \"position\": [760, -20], \"parameters\": {\"model\": \"text-embedding-3-small\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"2d31e92b-18d4-4f6b-8cdb-bed0056d50d7\", \"name\": \"Default Data Loader\", \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\", \"position\": [900, -20], \"parameters\": {\"options\": {}, \"jsonData\": \"={{ $('Extract from File').item.json.text }}\", \"jsonMode\": \"expressionData\"}, \"typeVersion\": 1}, {\"id\": \"ca0c015e-fba2-4dca-b0fe-bac66681725a\", \"name\": \"Recursive Character Text Splitter\", \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\", \"position\": [900, 100], \"parameters\": {\"options\": {}, \"chunkSize\": 2000, \"chunkOverlap\": {}}, \"typeVersion\": 1}, {\"id\": \"63abb6b2-b955-4e65-9c63-3211dca65613\", \"name\": \"Extract from File\", \"type\": \"n8n-nodes-base.extractFromFile\", \"position\": [360, -240], \"parameters\": {\"options\": {}, \"operation\": \"pdf\"}, \"typeVersion\": 1}, {\"id\": \"be2add9c-3670-4196-8c38-82742bf4f283\", \"name\": \"get Product Brochure\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [180, -240], \"parameters\": {\"url\": \"https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf\", \"options\": {}}, \"typeVersion\": 4.2}, {\"id\": \"1ae5a311-36d7-4454-ab14-6788d1331780\", \"name\": \"Reply To User\", \"type\": \"n8n-nodes-base.whatsApp\", \"position\": [2820, -280], \"parameters\": {\"textBody\": \"={{ $json.output }}\", \"operation\": \"send\", \"phoneNumberId\": \"477115632141067\", \"requestOptions\": {}, \"additionalFields\": {\"previewUrl\": false}, \"recipientPhoneNumber\": \"={{ $('WhatsApp Trigger').item.json.messages[0].from }}\"}, \"credentials\": {\"whatsAppApi\": {\"id\": \"9SFJPeqrpChOkAmw\", \"name\": \"WhatsApp account\"}}, \"typeVersion\": 1}, {\"id\": \"b6efba81-18b0-4378-bb91-51f39ca57f3e\", \"name\": \"Reply To User1\", \"type\": \"n8n-nodes-base.whatsApp\", \"position\": [1760, 80], \"parameters\": {\"textBody\": \"=I'm unable to process non-text messages. Please send only text messages. Thanks!\", \"operation\": \"send\", \"phoneNumberId\": \"477115632141067\", \"requestOptions\": {}, \"additionalFields\": {\"previewUrl\": false}, \"recipientPhoneNumber\": \"={{ $('WhatsApp Trigger').item.json.messages[0].from }}\"}, \"credentials\": {\"whatsAppApi\": {\"id\": \"9SFJPeqrpChOkAmw\", \"name\": \"WhatsApp account\"}}, \"typeVersion\": 1}, {\"id\": \"52decd86-ac6c-4d91-a938-86f93ec5f822\", \"name\": \"Product Catalogue\", \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreInMemory\", \"position\": [2200, -60], \"parameters\": {\"memoryKey\": \"whatsapp-75\"}, \"typeVersion\": 1}, {\"id\": \"6dd5a652-2464-4ab8-8e5f-568529299523\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-88.75, -473.4375], \"parameters\": {\"color\": 7, \"width\": 640.4375, \"height\": 434.6875, \"content\": \"## 1. Download Product Brochure PDF\\n[Read more about the HTTP Request Tool](https://docs.n8n.io/integrations/builtin/core-nodes/n8n-nodes-base.httprequest)\\n\\nImport your marketing PDF document to build your vector store. This will be used as the knowledgebase by the Sales AI Agent.\\n\\nFor this demonstration, we'll use the HTTP request node to import the YAMAHA POWERED LOUDSPEAKERS 2024 brochure ([Source](https://usa.yamaha.com/files/download/brochure/1/1474881/Yamaha-Powered-Loudspeakers-brochure-2024-en-web.pdf)) and an Extract from File node to extract the text contents. \"}, \"typeVersion\": 1}, {\"id\": \"116663bc-d8d6-41a5-93dc-b219adbb2235\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [580, -476], \"parameters\": {\"color\": 7, \"width\": 614.6875, \"height\": 731.1875, \"content\": \"## 2. Create Product Brochure Vector Store\\n[Read more about the In-Memory Vector Store](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.vectorstoreinmemory/)\\n\\nVector stores are powerful databases which serve the purpose of matching a user's questions to relevant parts of a document. By creating a vector store of our product catalog, we'll allow users to query using natural language.\\n\\nTo keep things simple, we'll use the **In-memory Vector Store** which comes built-in to n8n and doesn't require a separate service. For production deployments, I'd recommend replacing the in-memory vector store with either [Qdrant](https://qdrant.tech) or [Pinecone](https://pinecone.io).\"}, \"typeVersion\": 1}, {\"id\": \"86bd5334-d735-4650-aeff-06230119d705\", \"name\": \"Create Product Catalogue\", \"type\": \"@n8n/n8n-nodes-langchain.vectorStoreInMemory\", \"position\": [760, -200], \"parameters\": {\"mode\": \"insert\", \"memoryKey\": \"whatsapp-75\", \"clearStore\": true}, \"typeVersion\": 1}, {\"id\": \"b8078b0d-cbd7-423f-bb30-13902988be38\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1254, -552], \"parameters\": {\"color\": 7, \"width\": 546.6875, \"height\": 484.1875, \"content\": \"## 3. Use the WhatsApp Trigger\\n[Learn more about the WhatsApp Trigger](https://docs.n8n.io/integrations/builtin/trigger-nodes/n8n-nodes-base.whatsapptrigger/)\\n\\nThe WhatsApp Trigger allows you to receive incoming WhatsApp messages from customers. It requires a bit of setup so remember to follow the documentation carefully! Once ready however, it's quite easy to build powerful workflows which are easily accessible to users.\\n\\nNote that WhatsApp can send many message types such as audio and video so in this demonstration, we'll filter them out and just accept the text messages.\"}, \"typeVersion\": 1}, {\"id\": \"5bf7ed07-282b-4198-aa90-3e5ae5180404\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1640, 280], \"parameters\": {\"width\": 338, \"height\": 92, \"content\": \"### Want to handle all message types?\\nCheck out my other WhatsApp template in my creator page! https://n8n.io/creators/jimleuk/\"}, \"typeVersion\": 1}, {\"id\": \"a3661b59-25d2-446e-8462-32b4d692b69d\", \"name\": \"Sticky Note4\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1640, -40], \"parameters\": {\"color\": 7, \"width\": 337.6875, \"height\": 311.1875, \"content\": \"### 3a. Handle Unsupported Message Types\\nFor non-text messages, we'll just reply with a simple message to inform the sender.\"}, \"typeVersion\": 1}, {\"id\": \"ea3c9ee1-505a-40e7-82fe-9169bdbb80af\", \"name\": \"Sticky Note5\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1840, -682.5], \"parameters\": {\"color\": 7, \"width\": 746.6875, \"height\": 929.1875, \"content\": \"## 4. Sales AI Agent Responds To Customers\\n[Learn more about using AI Agents](https://docs.n8n.io/integrations/builtin/cluster-nodes/root-nodes/n8n-nodes-langchain.agent/)\\n\\nn8n's AI agents are powerful nodes which make it incredibly easy to use state-of-the-art AI in your workflows. Not only do they have the ability to remember conversations per individual customer but also tap into resources such as our product catalogue vector store to pull factual information and data for every question.\\n\\nIn this demonstration, we use an AI agent which is directed to help the user navigate the product brochure. A Chat memory subnode is attached to identify and keep track of the customer session. A Vector store tool is added to allow the Agent to tap into the product catalogue knowledgebase we built earlier.\"}, \"typeVersion\": 1}, {\"id\": \"5c72df8d-bca1-4634-b1ed-61ffec8bd103\", \"name\": \"Sticky Note6\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [2620, -560], \"parameters\": {\"color\": 7, \"width\": 495.4375, \"height\": 484.1875, \"content\": \"## 5. Repond to WhatsApp User\\n[Learn more about the WhatsApp Node](https://docs.n8n.io/integrations/builtin/app-nodes/n8n-nodes-base.whatsapp/)\\n\\nThe WhatsApp node is the go-to if you want to interact with WhatsApp users. With this node, you can send text, images, audio and video messages as well as use your WhatsApp message templates.\\n\\nHere, we'll keep it simple by replying with a text message which is the output of the AI agent.\"}, \"typeVersion\": 1}, {\"id\": \"48ec809f-ca0e-4052-b403-9ad7077b3fff\", \"name\": \"Sticky Note7\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-520, -620], \"parameters\": {\"width\": 401.25, \"height\": 582.6283033962263, \"content\": \"## Try It Out!\\n\\n### This n8n template builds a simple WhatsApp chabot acting as a Sales Agent. The Agent is backed by a product catalog vector store to better answer user's questions.\\n\\n* This template is in 2 parts: creating the product catalog vector store and building the WhatsApp AI chatbot.\\n* A product brochure is imported via HTTP request node and its text contents extracted.\\n* The text contents are then uploaded to the in-memory vector store to build a knowledgebase for the chatbot.\\n* A WhatsApp trigger is used to capture messages from customers where non-text messages are filtered out.\\n* The customer's message is sent to the AI Agent which queries the product catalogue using the vector store tool.\\n* The Agent's response is sent back to the user via the WhatsApp node.\\n\\n### Need Help?\\nJoin the [Discord](https://discord.com/invite/XPKeKXeB7d) or ask in the [Forum](https://community.n8n.io/)!\"}, \"typeVersion\": 1}, {\"id\": \"87cf9b41-66de-49a7-aeb0-c8809191b5a0\", \"name\": \"Handle Message Types\", \"type\": \"n8n-nodes-base.switch\", \"position\": [1560, -280], \"parameters\": {\"rules\": {\"values\": [{\"outputKey\": \"Supported\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"operator\": {\"type\": \"string\", \"operation\": \"equals\"}, \"leftValue\": \"={{ $json.messages[0].type }}\", \"rightValue\": \"text\"}]}, \"renameOutput\": true}, {\"outputKey\": \"Not Supported\", \"conditions\": {\"options\": {\"version\": 2, \"leftValue\": \"\", \"caseSensitive\": true, \"typeValidation\": \"strict\"}, \"combinator\": \"and\", \"conditions\": [{\"id\": \"89971d8c-a386-4e77-8f6c-f491a8e84cb6\", \"operator\": {\"type\": \"string\", \"operation\": \"notEquals\"}, \"leftValue\": \"={{ $json.messages[0].type }}\", \"rightValue\": \"text\"}]}, \"renameOutput\": true}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"e52f0a50-0c34-4c4a-b493-4c42ba112277\", \"name\": \"Sticky Note8\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-80, -20], \"parameters\": {\"color\": 5, \"width\": 345.10906976744184, \"height\": 114.53583720930231, \"content\": \"### You only have to run this part once!\\nRun this step to populate our product catalogue vector. Run again if you want to update the vector store with a new version.\"}, \"typeVersion\": 1}, {\"id\": \"c1a7d6d1-191e-4343-af9f-f2c9eb4ecf49\", \"name\": \"Sticky Note9\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1260, -40], \"parameters\": {\"color\": 5, \"width\": 364.6293255813954, \"height\": 107.02804651162779, \"content\": \"### Activate your workflow to use!\\nTo start using the WhatsApp chatbot, you'll need to activate the workflow. If you are self-hosting ensure WhatsApp is able to connect to your server.\"}, \"typeVersion\": 1}, {\"id\": \"a36524d0-22a6-48cc-93fe-b4571cec428a\", \"name\": \"AI Sales Agent\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"position\": [1960, -400], \"parameters\": {\"text\": \"={{ $json.messages[0].text.body }}\", \"options\": {\"systemMessage\": \"You are an assistant working for a company who sells Yamaha Powered Loudspeakers and helping the user navigate the product catalog for the year 2024. Your goal is not to facilitate a sale but if the user enquires, direct them to the appropriate website, url or contact information.\\n\\nDo your best to answer any questions factually. If you don't know the answer or unable to obtain the information from the datastore, then tell the user so.\"}, \"promptType\": \"define\"}, \"typeVersion\": 1.6}], \"pinData\": {}, \"connections\": {\"AI Sales Agent\": {\"main\": [[{\"node\": \"Reply To User\", \"type\": \"main\", \"index\": 0}]]}, \"WhatsApp Trigger\": {\"main\": [[{\"node\": \"Handle Message Types\", \"type\": \"main\", \"index\": 0}]]}, \"Embeddings OpenAI\": {\"ai_embedding\": [[{\"node\": \"Product Catalogue\", \"type\": \"ai_embedding\", \"index\": 0}]]}, \"Extract from File\": {\"main\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"main\", \"index\": 0}]]}, \"OpenAI Chat Model\": {\"ai_languageModel\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Product Catalogue\": {\"ai_vectorStore\": [[{\"node\": \"Vector Store Tool\", \"type\": \"ai_vectorStore\", \"index\": 0}]]}, \"Vector Store Tool\": {\"ai_tool\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"Embeddings OpenAI1\": {\"ai_embedding\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"ai_embedding\", \"index\": 0}]]}, \"OpenAI Chat Model1\": {\"ai_languageModel\": [[{\"node\": \"Vector Store Tool\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Default Data Loader\": {\"ai_document\": [[{\"node\": \"Create Product Catalogue\", \"type\": \"ai_document\", \"index\": 0}]]}, \"Handle Message Types\": {\"main\": [[{\"node\": \"AI Sales Agent\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Reply To User1\", \"type\": \"main\", \"index\": 0}]]}, \"Window Buffer Memory\": {\"ai_memory\": [[{\"node\": \"AI Sales Agent\", \"type\": \"ai_memory\", \"index\": 0}]]}, \"get Product Brochure\": {\"main\": [[{\"node\": \"Extract from File\", \"type\": \"main\", \"index\": 0}]]}, \"Recursive Character Text Splitter\": {\"ai_textSplitter\": [[{\"node\": \"Default Data Loader\", \"type\": \"ai_textSplitter\", \"index\": 0}]]}, \"When clicking \\u2018Test workflow\\u2019\": {\"main\": [[{\"node\": \"get Product Brochure\", \"type\": \"main\", \"index\": 0}]]}}}"}]}
{"messages":[{"role":"system","content":"You are an AI assistant helping users create N8N workflows."},{"role":"user","content":"How can I set up a workflow in N8N to fetch and summarize the first three essays from a list?"},{"role":"assistant","content":"{\"meta\": {\"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"},  \"nodes\": [{\"id\": \"67850bd7-f9f4-4d5b-8c9e-bd1451247ba6\", \"name\": \"When clicking \\\"Execute Workflow\\\"\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [-740, 1000], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"0d9133f9-b6d3-4101-95c6-3cd24cdb70c3\", \"name\": \"Fetch essay list\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [-520, 1000], \"parameters\": {\"url\": \"http://www.paulgraham.com/articles.html\", \"options\": {}}, \"typeVersion\": 4.1}, {\"id\": \"ee634297-a456-4f70-a995-55b02950571e\", \"name\": \"Extract essay names\", \"type\": \"n8n-nodes-base.html\", \"position\": [-300, 1000], \"parameters\": {\"options\": {}, \"operation\": \"extractHtmlContent\", \"dataPropertyName\": \"=data\", \"extractionValues\": {\"values\": [{\"key\": \"essay\", \"attribute\": \"href\", \"cssSelector\": \"table table a\", \"returnArray\": true, \"returnValue\": \"attribute\"}]}}, \"typeVersion\": 1}, {\"id\": \"83d75693-dbb8-44c4-8533-da06f611c59c\", \"name\": \"Fetch essay texts\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [360, 1000], \"parameters\": {\"url\": \"=http://www.paulgraham.com/{{ $json.essay }}\", \"options\": {}}, \"typeVersion\": 4.1}, {\"id\": \"151022b5-8570-4176-bf3f-137f27ac7036\", \"name\": \"Extract title\", \"type\": \"n8n-nodes-base.html\", \"position\": [700, 700], \"parameters\": {\"options\": {}, \"operation\": \"extractHtmlContent\", \"extractionValues\": {\"values\": [{\"key\": \"title\", \"cssSelector\": \"title\"}]}}, \"typeVersion\": 1}, {\"id\": \"07bcf095-3c4d-4a72-9bcb-341411750ff5\", \"name\": \"Clean up\", \"type\": \"n8n-nodes-base.set\", \"position\": [1360, 980], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"title\", \"stringValue\": \"={{ $json.title }}\"}, {\"name\": \"summary\", \"stringValue\": \"={{ $json.response.text }}\"}, {\"name\": \"url\", \"stringValue\": \"=http://www.paulgraham.com/{{ $('Limit to first 3').item.json.essay }}\"}]}, \"include\": \"none\", \"options\": {}}, \"typeVersion\": 3}, {\"id\": \"11285de0-3c5d-4296-a322-9b7585af9acc\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-580, 920], \"parameters\": {\"width\": 1071.752021563343, \"height\": 285.66037735849045, \"content\": \"## Scrape latest Paul Graham essays\"}, \"typeVersion\": 1}, {\"id\": \"c32f905d-dd7a-4b68-bbe0-dd8115ee0944\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [620, 920], \"parameters\": {\"width\": 465.3908355795153, \"height\": 606.7924528301882, \"content\": \"## Summarize them with GPT\"}, \"typeVersion\": 1}, {\"id\": \"29d264f4-df6d-4a41-ab38-58e1b1becc9a\", \"name\": \"Split out into items\", \"type\": \"n8n-nodes-base.splitOut\", \"position\": [-80, 1000], \"parameters\": {\"options\": {}, \"fieldToSplitOut\": \"essay\"}, \"typeVersion\": 1}, {\"id\": \"ccfa3a1d-f170-44b4-a1f2-3573c88cae98\", \"name\": \"Limit to first 3\", \"type\": \"n8n-nodes-base.limit\", \"position\": [140, 1000], \"parameters\": {\"maxItems\": 3}, \"typeVersion\": 1}, {\"id\": \"c3d05068-9d1a-4ef5-8249-e7384dc617ee\", \"name\": \"Default Data Loader\", \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\", \"position\": [820, 1200], \"parameters\": {\"options\": {}}, \"typeVersion\": 1}, {\"id\": \"db75adad-cb16-4e72-b16e-34684a733b05\", \"name\": \"Recursive Character Text Splitter\", \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\", \"position\": [820, 1340], \"parameters\": {\"options\": {}}, \"typeVersion\": 1}, {\"id\": \"022cc091-9b4c-45c2-bc8e-4037ec2d0d60\", \"name\": \"OpenAI Chat Model1\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [680, 1200], \"parameters\": {\"model\": \"gpt-4o-mini\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"cda47bb7-36c5-4d15-a1ef-0c66b1194825\", \"name\": \"Merge\", \"type\": \"n8n-nodes-base.merge\", \"position\": [1160, 980], \"parameters\": {\"mode\": \"combine\", \"options\": {}, \"combineBy\": \"combineByPosition\"}, \"typeVersion\": 3}, {\"id\": \"28144e4c-e425-428d-b3d1-f563bfd4e5b3\", \"name\": \"Summarization Chain\", \"type\": \"@n8n/n8n-nodes-langchain.chainSummarization\", \"position\": [720, 1000], \"parameters\": {\"options\": {}, \"operationMode\": \"documentLoader\"}, \"typeVersion\": 2}], \"pinData\": {}, \"connections\": {\"Merge\": {\"main\": [[{\"node\": \"Clean up\", \"type\": \"main\", \"index\": 0}]]}, \"Extract title\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 0}]]}, \"Fetch essay list\": {\"main\": [[{\"node\": \"Extract essay names\", \"type\": \"main\", \"index\": 0}]]}, \"Limit to first 3\": {\"main\": [[{\"node\": \"Fetch essay texts\", \"type\": \"main\", \"index\": 0}]]}, \"Fetch essay texts\": {\"main\": [[{\"node\": \"Extract title\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Summarization Chain\", \"type\": \"main\", \"index\": 0}]]}, \"OpenAI Chat Model1\": {\"ai_languageModel\": [[{\"node\": \"Summarization Chain\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Default Data Loader\": {\"ai_document\": [[{\"node\": \"Summarization Chain\", \"type\": \"ai_document\", \"index\": 0}]]}, \"Extract essay names\": {\"main\": [[{\"node\": \"Split out into items\", \"type\": \"main\", \"index\": 0}]]}, \"Summarization Chain\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 1}]]}, \"Split out into items\": {\"main\": [[{\"node\": \"Limit to first 3\", \"type\": \"main\", \"index\": 0}]]}, \"When clicking \\\"Execute Workflow\\\"\": {\"main\": [[{\"node\": \"Fetch essay list\", \"type\": \"main\", \"index\": 0}]]}, \"Recursive Character Text Splitter\": {\"ai_textSplitter\": [[{\"node\": \"Default Data Loader\", \"type\": \"ai_textSplitter\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "What N8N workflow would you use to execute a process that involves fetching essays, extracting titles, and summarizing content using OpenAI?"}, {"role": "assistant", "content": "{\"meta\": {\"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"}, \"nodes\": [{\"id\": \"67850bd7-f9f4-4d5b-8c9e-bd1451247ba6\", \"name\": \"When clicking \\\"Execute Workflow\\\"\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [-740, 1000], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"0d9133f9-b6d3-4101-95c6-3cd24cdb70c3\", \"name\": \"Fetch essay list\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [-520, 1000], \"parameters\": {\"url\": \"http://www.paulgraham.com/articles.html\", \"options\": {}}, \"typeVersion\": 4.1}, {\"id\": \"ee634297-a456-4f70-a995-55b02950571e\", \"name\": \"Extract essay names\", \"type\": \"n8n-nodes-base.html\", \"position\": [-300, 1000], \"parameters\": {\"options\": {}, \"operation\": \"extractHtmlContent\", \"dataPropertyName\": \"=data\", \"extractionValues\": {\"values\": [{\"key\": \"essay\", \"attribute\": \"href\", \"cssSelector\": \"table table a\", \"returnArray\": true, \"returnValue\": \"attribute\"}]}}, \"typeVersion\": 1}, {\"id\": \"83d75693-dbb8-44c4-8533-da06f611c59c\", \"name\": \"Fetch essay texts\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [360, 1000], \"parameters\": {\"url\": \"=http://www.paulgraham.com/{{ $json.essay }}\", \"options\": {}}, \"typeVersion\": 4.1}, {\"id\": \"151022b5-8570-4176-bf3f-137f27ac7036\", \"name\": \"Extract title\", \"type\": \"n8n-nodes-base.html\", \"position\": [700, 700], \"parameters\": {\"options\": {}, \"operation\": \"extractHtmlContent\", \"extractionValues\": {\"values\": [{\"key\": \"title\", \"cssSelector\": \"title\"}]}}, \"typeVersion\": 1}, {\"id\": \"07bcf095-3c4d-4a72-9bcb-341411750ff5\", \"name\": \"Clean up\", \"type\": \"n8n-nodes-base.set\", \"position\": [1360, 980], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"title\", \"stringValue\": \"={{ $json.title }}\"}, {\"name\": \"summary\", \"stringValue\": \"={{ $json.response.text }}\"}, {\"name\": \"url\", \"stringValue\": \"=http://www.paulgraham.com/{{ $('Limit to first 3').item.json.essay }}\"}]}, \"include\": \"none\", \"options\": {}}, \"typeVersion\": 3}, {\"id\": \"11285de0-3c5d-4296-a322-9b7585af9acc\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-580, 920], \"parameters\": {\"width\": 1071.752021563343, \"height\": 285.66037735849045, \"content\": \"## Scrape latest Paul Graham essays\"}, \"typeVersion\": 1}, {\"id\": \"c32f905d-dd7a-4b68-bbe0-dd8115ee0944\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [620, 920], \"parameters\": {\"width\": 465.3908355795153, \"height\": 606.7924528301882, \"content\": \"## Summarize them with GPT\"}, \"typeVersion\": 1}, {\"id\": \"29d264f4-df6d-4a41-ab38-58e1b1becc9a\", \"name\": \"Split out into items\", \"type\": \"n8n-nodes-base.splitOut\", \"position\": [-80, 1000], \"parameters\": {\"options\": {}, \"fieldToSplitOut\": \"essay\"}, \"typeVersion\": 1}, {\"id\": \"ccfa3a1d-f170-44b4-a1f2-3573c88cae98\", \"name\": \"Limit to first 3\", \"type\": \"n8n-nodes-base.limit\", \"position\": [140, 1000], \"parameters\": {\"maxItems\": 3}, \"typeVersion\": 1}, {\"id\": \"c3d05068-9d1a-4ef5-8249-e7384dc617ee\", \"name\": \"Default Data Loader\", \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\", \"position\": [820, 1200], \"parameters\": {\"options\": {}}, \"typeVersion\": 1}, {\"id\": \"db75adad-cb16-4e72-b16e-34684a733b05\", \"name\": \"Recursive Character Text Splitter\", \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\", \"position\": [820, 1340], \"parameters\": {\"options\": {}}, \"typeVersion\": 1}, {\"id\": \"022cc091-9b4c-45c2-bc8e-4037ec2d0d60\", \"name\": \"OpenAI Chat Model1\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [680, 1200], \"parameters\": {\"model\": \"gpt-4o-mini\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"cda47bb7-36c5-4d15-a1ef-0c66b1194825\", \"name\": \"Merge\", \"type\": \"n8n-nodes-base.merge\", \"position\": [1160, 980], \"parameters\": {\"mode\": \"combine\", \"options\": {}, \"combineBy\": \"combineByPosition\"}, \"typeVersion\": 3}, {\"id\": \"28144e4c-e425-428d-b3d1-f563bfd4e5b3\", \"name\": \"Summarization Chain\", \"type\": \"@n8n/n8n-nodes-langchain.chainSummarization\", \"position\": [720, 1000], \"parameters\": {\"options\": {}, \"operationMode\": \"documentLoader\"}, \"typeVersion\": 2}], \"pinData\": {}, \"connections\": {\"Merge\": {\"main\": [[{\"node\": \"Clean up\", \"type\": \"main\", \"index\": 0}]]}, \"Extract title\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 0}]]}, \"Fetch essay list\": {\"main\": [[{\"node\": \"Extract essay names\", \"type\": \"main\", \"index\": 0}]]}, \"Limit to first 3\": {\"main\": [[{\"node\": \"Fetch essay texts\", \"type\": \"main\", \"index\": 0}]]}, \"Fetch essay texts\": {\"main\": [[{\"node\": \"Extract title\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Summarization Chain\", \"type\": \"main\", \"index\": 0}]]}, \"OpenAI Chat Model1\": {\"ai_languageModel\": [[{\"node\": \"Summarization Chain\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Default Data Loader\": {\"ai_document\": [[{\"node\": \"Summarization Chain\", \"type\": \"ai_document\", \"index\": 0}]]}, \"Extract essay names\": {\"main\": [[{\"node\": \"Split out into items\", \"type\": \"main\", \"index\": 0}]]}, \"Summarization Chain\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 1}]]}, \"Split out into items\": {\"main\": [[{\"node\": \"Limit to first 3\", \"type\": \"main\", \"index\": 0}]]}, \"When clicking \\\"Execute Workflow\\\"\": {\"main\": [[{\"node\": \"Fetch essay list\", \"type\": \"main\", \"index\": 0}]]}, \"Recursive Character Text Splitter\": {\"ai_textSplitter\": [[{\"node\": \"Default Data Loader\", \"type\": \"ai_textSplitter\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "Can you provide an example of an N8N workflow that extracts essay names from a list, fetches their content, and summarizes them?"}, {"role": "assistant", "content": "{\"meta\": {\"instanceId\": \"408f9fb9940c3cb18ffdef0e0150fe342d6e655c3a9fac21f0f644e8bedabcd9\"}, \"nodes\": [{\"id\": \"67850bd7-f9f4-4d5b-8c9e-bd1451247ba6\", \"name\": \"When clicking \\\"Execute Workflow\\\"\", \"type\": \"n8n-nodes-base.manualTrigger\", \"position\": [-740, 1000], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"0d9133f9-b6d3-4101-95c6-3cd24cdb70c3\", \"name\": \"Fetch essay list\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [-520, 1000], \"parameters\": {\"url\": \"http://www.paulgraham.com/articles.html\", \"options\": {}}, \"typeVersion\": 4.1}, {\"id\": \"ee634297-a456-4f70-a995-55b02950571e\", \"name\": \"Extract essay names\", \"type\": \"n8n-nodes-base.html\", \"position\": [-300, 1000], \"parameters\": {\"options\": {}, \"operation\": \"extractHtmlContent\", \"dataPropertyName\": \"=data\", \"extractionValues\": {\"values\": [{\"key\": \"essay\", \"attribute\": \"href\", \"cssSelector\": \"table table a\", \"returnArray\": true, \"returnValue\": \"attribute\"}]}}, \"typeVersion\": 1}, {\"id\": \"83d75693-dbb8-44c4-8533-da06f611c59c\", \"name\": \"Fetch essay texts\", \"type\": \"n8n-nodes-base.httpRequest\", \"position\": [360, 1000], \"parameters\": {\"url\": \"=http://www.paulgraham.com/{{ $json.essay }}\", \"options\": {}}, \"typeVersion\": 4.1}, {\"id\": \"151022b5-8570-4176-bf3f-137f27ac7036\", \"name\": \"Extract title\", \"type\": \"n8n-nodes-base.html\", \"position\": [700, 700], \"parameters\": {\"options\": {}, \"operation\": \"extractHtmlContent\", \"extractionValues\": {\"values\": [{\"key\": \"title\", \"cssSelector\": \"title\"}]}}, \"typeVersion\": 1}, {\"id\": \"07bcf095-3c4d-4a72-9bcb-341411750ff5\", \"name\": \"Clean up\", \"type\": \"n8n-nodes-base.set\", \"position\": [1360, 980], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"title\", \"stringValue\": \"={{ $json.title }}\"}, {\"name\": \"summary\", \"stringValue\": \"={{ $json.response.text }}\"}, {\"name\": \"url\", \"stringValue\": \"=http://www.paulgraham.com/{{ $('Limit to first 3').item.json.essay }}\"}]}, \"include\": \"none\", \"options\": {}}, \"typeVersion\": 3}, {\"id\": \"11285de0-3c5d-4296-a322-9b7585af9acc\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [-580, 920], \"parameters\": {\"width\": 1071.752021563343, \"height\": 285.66037735849045, \"content\": \"## Scrape latest Paul Graham essays\"}, \"typeVersion\": 1}, {\"id\": \"c32f905d-dd7a-4b68-bbe0-dd8115ee0944\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [620, 920], \"parameters\": {\"width\": 465.3908355795153, \"height\": 606.7924528301882, \"content\": \"## Summarize them with GPT\"}, \"typeVersion\": 1}, {\"id\": \"29d264f4-df6d-4a41-ab38-58e1b1becc9a\", \"name\": \"Split out into items\", \"type\": \"n8n-nodes-base.splitOut\", \"position\": [-80, 1000], \"parameters\": {\"options\": {}, \"fieldToSplitOut\": \"essay\"}, \"typeVersion\": 1}, {\"id\": \"ccfa3a1d-f170-44b4-a1f2-3573c88cae98\", \"name\": \"Limit to first 3\", \"type\": \"n8n-nodes-base.limit\", \"position\": [140, 1000], \"parameters\": {\"maxItems\": 3}, \"typeVersion\": 1}, {\"id\": \"c3d05068-9d1a-4ef5-8249-e7384dc617ee\", \"name\": \"Default Data Loader\", \"type\": \"@n8n/n8n-nodes-langchain.documentDefaultDataLoader\", \"position\": [820, 1200], \"parameters\": {\"options\": {}}, \"typeVersion\": 1}, {\"id\": \"db75adad-cb16-4e72-b16e-34684a733b05\", \"name\": \"Recursive Character Text Splitter\", \"type\": \"@n8n/n8n-nodes-langchain.textSplitterRecursiveCharacterTextSplitter\", \"position\": [820, 1340], \"parameters\": {\"options\": {}}, \"typeVersion\": 1}, {\"id\": \"022cc091-9b4c-45c2-bc8e-4037ec2d0d60\", \"name\": \"OpenAI Chat Model1\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [680, 1200], \"parameters\": {\"model\": \"gpt-4o-mini\", \"options\": {}}, \"credentials\": {\"openAiApi\": {\"id\": \"8gccIjcuf3gvaoEr\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"cda47bb7-36c5-4d15-a1ef-0c66b1194825\", \"name\": \"Merge\", \"type\": \"n8n-nodes-base.merge\", \"position\": [1160, 980], \"parameters\": {\"mode\": \"combine\", \"options\": {}, \"combineBy\": \"combineByPosition\"}, \"typeVersion\": 3}, {\"id\": \"28144e4c-e425-428d-b3d1-f563bfd4e5b3\", \"name\": \"Summarization Chain\", \"type\": \"@n8n/n8n-nodes-langchain.chainSummarization\", \"position\": [720, 1000], \"parameters\": {\"options\": {}, \"operationMode\": \"documentLoader\"}, \"typeVersion\": 2}], \"pinData\": {}, \"connections\": {\"Merge\": {\"main\": [[{\"node\": \"Clean up\", \"type\": \"main\", \"index\": 0}]]}, \"Extract title\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 0}]]}, \"Fetch essay list\": {\"main\": [[{\"node\": \"Extract essay names\", \"type\": \"main\", \"index\": 0}]]}, \"Limit to first 3\": {\"main\": [[{\"node\": \"Fetch essay texts\", \"type\": \"main\", \"index\": 0}]]}, \"Fetch essay texts\": {\"main\": [[{\"node\": \"Extract title\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Summarization Chain\", \"type\": \"main\", \"index\": 0}]]}, \"OpenAI Chat Model1\": {\"ai_languageModel\": [[{\"node\": \"Summarization Chain\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Default Data Loader\": {\"ai_document\": [[{\"node\": \"Summarization Chain\", \"type\": \"ai_document\", \"index\": 0}]]}, \"Extract essay names\": {\"main\": [[{\"node\": \"Split out into items\", \"type\": \"main\", \"index\": 0}]]}, \"Summarization Chain\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 1}]]}, \"Split out into items\": {\"main\": [[{\"node\": \"Limit to first 3\", \"type\": \"main\", \"index\": 0}]]}, \"When clicking \\\"Execute Workflow\\\"\": {\"main\": [[{\"node\": \"Fetch essay list\", \"type\": \"main\", \"index\": 0}]]}, \"Recursive Character Text Splitter\": {\"ai_textSplitter\": [[{\"node\": \"Default Data Loader\", \"type\": \"ai_textSplitter\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "How can I create a workflow in N8N to handle incoming chat messages with a custom HTTP request and error handling?"}, {"role": "assistant", "content": "{\"id\": \"dsKnCFwysROIA4MT\", \"meta\": {\"instanceId\": \"03524270bab2c2dfd5b82778cd1355e56cdda3cf098bf2dfd865e18164c00485\"}, \"name\": \"Agent with custom HTTP Request\",  \"tags\": [], \"nodes\": [{\"id\": \"e7374976-f3c1-4f60-ae57-9eec65444216\", \"name\": \"On new manual Chat Message\", \"type\": \"@n8n/n8n-nodes-langchain.manualChatTrigger\", \"position\": [763, 676], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"97e84a23-9536-43cd-94e9-b8166be8ed32\", \"name\": \"OpenAI Chat Model\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [983, 896], \"parameters\": {\"model\": \"gpt-4-1106-preview\", \"options\": {\"timeout\": 300000, \"temperature\": 0.7, \"frequencyPenalty\": 0.3}}, \"credentials\": {\"openAiApi\": {\"id\": \"wPFAzp4ZHdLLwvkK\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"63d98361-8978-4042-84e7-53a0e226f946\", \"name\": \"HTTP Request\", \"type\": \"n8n-nodes-base.httpRequest\", \"onError\": \"continueRegularOutput\", \"position\": [1360, 1200], \"parameters\": {\"url\": \"={{ encodeURI($json.query.url) }}\", \"options\": {\"response\": {\"response\": {\"neverError\": true}}, \"allowUnauthorizedCerts\": true}}, \"typeVersion\": 4.1, \"alwaysOutputData\": false}, {\"id\": \"17d4b5ae-f5d3-4793-8419-d3c879f7f50d\", \"name\": \"Exctract HTML Body\", \"type\": \"n8n-nodes-base.set\", \"position\": [1780, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ $json?.data.match(/<body[^>]*>([\\\\s\\\\S]*?)<\\\\/body>/i)[1] }}\"}]}, \"include\": \"selected\", \"options\": {}, \"includeFields\": \"HTML\"}, \"typeVersion\": 3.2}, {\"id\": \"36c38ee4-724c-4ba2-a59a-ac0bbc912e94\", \"name\": \"Is error?\", \"type\": \"n8n-nodes-base.if\", \"position\": [1560, 1200], \"parameters\": {\"conditions\": {\"boolean\": [{\"value1\": \"={{ $json.hasOwnProperty('error') }}\", \"value2\": true}]}}, \"typeVersion\": 1}, {\"id\": \"4e4d97ce-14a9-4f4f-aa75-f218784d9ed9\", \"name\": \"Stringify error message\", \"type\": \"n8n-nodes-base.set\", \"position\": [1780, 980], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"page_content\", \"stringValue\": \"={{ $('QUERY_PARAMS').first()?.json?.query?.url == null ? \\\"INVALID action_input. This should be an HTTP query string like this: \\\\\\\"?url=VALIDURL&method=SELECTEDMETHOD\\\\\\\". Only a simple string value is accepted. JSON object as an action_input is NOT supported!\\\" : JSON.stringify($json.error) }}\"}]}, \"include\": \"selected\", \"options\": {}, \"includeFields\": \"HTML\"}, \"typeVersion\": 3.2}, {\"id\": \"8452e5c4-aa29-4a02-9579-8d9da3727bcb\", \"name\": \"Execute Workflow Trigger\", \"type\": \"n8n-nodes-base.executeWorkflowTrigger\", \"position\": [760, 1200], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"063220c2-fa4d-4d5e-9549-7712aaa72921\", \"name\": \"Remove extra tags\", \"type\": \"n8n-nodes-base.set\", \"position\": [1980, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ ($json.HTML || \\\"HTML BODY CONTENT FOR THIS SEARCH RESULT IS NOT AVAILABLE\\\").replace(/<script[^>]*>([\\\\s\\\\S]*?)<\\\\/script>|<style[^>]*>([\\\\s\\\\S]*?)<\\\\/style>|<noscript[^>]*>([\\\\s\\\\S]*?)<\\\\/noscript>|<!--[\\\\s\\\\S]*?-->|<iframe[^>]*>([\\\\s\\\\S]*?)<\\\\/iframe>|<object[^>]*>([\\\\s\\\\S]*?)<\\\\/object>|<embed[^>]*>([\\\\s\\\\S]*?)<\\\\/embed>|<video[^>]*>([\\\\s\\\\S]*?)<\\\\/video>|<audio[^>]*>([\\\\s\\\\S]*?)<\\\\/audio>|<svg[^>]*>([\\\\s\\\\S]*?)<\\\\/svg>/ig, '')}}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"036511d7-a4be-4bbf-b4bc-47ddfabfe76f\", \"name\": \"Simplify output\", \"type\": \"n8n-nodes-base.set\", \"notes\": \"remove links and image URLs\", \"position\": [2360, 1380], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ $json.HTML.replace(/href\\\\s*=\\\\s*\\\"(.+?)\\\"/gi, 'href=\\\"NOURL\\\"').replace(/src\\\\s*=\\\\s*\\\"(.+?)\\\"/gi, 'src=\\\"NOIMG\\\"')}}\"}]}, \"options\": {}}, \"notesInFlow\": true, \"typeVersion\": 3.2}, {\"id\": \"5e2b5383-adcf-4de0-a406-4f5d631b5e8a\", \"name\": \"Simplify?\", \"type\": \"n8n-nodes-base.if\", \"position\": [2180, 1480], \"parameters\": {\"conditions\": {\"string\": [{\"value1\": \"={{ $('CONFIG').first()?.json?.query?.method }}\", \"value2\": \"simplif\", \"operation\": \"contains\"}]}}, \"typeVersion\": 1}, {\"id\": \"a0fc004a-ab0f-4b31-94df-50f5eee69c86\", \"name\": \"QUERY_PARAMS\", \"type\": \"n8n-nodes-base.set\", \"position\": [960, 1200], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"query\", \"type\": \"objectValue\", \"objectValue\": \"={{ $json.query.substring($json.query.indexOf('?') + 1).split('&').reduce((result, item) => (result[item.split('=')[0]] = decodeURIComponent(item.split('=')[1]), result), {}) }}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"3b6599d6-ce9a-4861-9b52-07156eb52539\", \"name\": \"CONFIG\", \"type\": \"n8n-nodes-base.set\", \"position\": [1160, 1200], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"query.maxlimit\", \"type\": \"numberValue\", \"numberValue\": \"={{ $json?.query?.maxlimit == null ? 70000 : Number($json?.query?.maxlimit) }}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"14f683be-76f6-4034-9a0e-d785738b135f\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [721, 1134], \"parameters\": {\"width\": 556.25, \"height\": 235.79999999999995, \"content\": \"### Convert the query string into JSON, apply the limit for a page length\"}, \"typeVersion\": 1}, {\"id\": \"6deabcb7-a984-48ec-af2a-8c70b3a4e4bf\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1720, 840], \"parameters\": {\"width\": 491, \"height\": 285.7, \"content\": \"## Send an error message:\\n1. If query param was incorrect, return the instruction. AI Agent should pick up on this and adapt the query on the next iteration.\\n2. If the query is OK and an error was during the HTTP Request, then send back the original error message.\"}, \"typeVersion\": 1}, {\"id\": \"df1e8d00-0e18-44fa-8f94-8a53c27f7c88\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1720, 1160], \"parameters\": {\"width\": 1200, \"height\": 472.5, \"content\": \"## Post-processing of the HTML page:\\n1. Keep only <BODY> content\\n2. Remove inline <SCRIPT> tag entirely, as well as: NOSCRIPT, IFRAME, OBJECT, EMBED, VIDEO, AUDIO, SVG, and HTML comments.\\n3. In case query parameter method=simplified, replace all page URLs (a href) and IMG (src) with NOURL / NOIMG - this may save up to 20% of the page length\\n4. Convert the remaining HTML to Markdown. This step further reduces the length of the page: long HTML tags and styles are eliminated, but the markdown syntax keeps some page structure. This gives much better results compared to just a blank text.\\n5. Finally, check the page length. If it's too long, send an \\\"ERROR: PAGE CONTENT TOO LONG\\\" instead of the actual page. Of course, you could split the page content in chunks, but sometimes long pages just don't have a needed content, so it makes little sense to burn tokens on them.\"}, \"typeVersion\": 1}, {\"id\": \"6afe96a0-0fba-4ae1-ab8f-f7da56d420b1\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [720, 540], \"parameters\": {\"width\": 616.8597285067872, \"height\": 483.0226244343891, \"content\": \"## Example ReAct AI Agent\\n1. Agent Prompt is default\\n2. Check the description of the HTTP_Request_Tool, it guides the agent to provide a query string with several parameters instead of a JSON object\"}, \"typeVersion\": 1}, {\"id\": \"d5ff2114-1e74-43cf-9f3c-744c241988db\", \"name\": \"ReAct AI Agent\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"position\": [983, 676], \"parameters\": {\"agent\": \"reActAgent\", \"options\": {\"prefix\": \"Answer the following questions as best you can. You have access to the following tools:\", \"suffix\": \"Begin!\\n\\n\\tQuestion: {input}\\n\\tThought:{agent_scratchpad}\", \"suffixChat\": \"Begin! Reminder to always use the exact characters `Final Answer` when responding.\", \"humanMessageTemplate\": \"{input}\\n\\n{agent_scratchpad}\"}}, \"typeVersion\": 1}, {\"id\": \"cc7aef4a-a1fb-4a69-a670-1f200f9e9541\", \"name\": \"Convert to Markdown\", \"type\": \"n8n-nodes-base.markdown\", \"position\": [2540, 1480], \"parameters\": {\"html\": \"={{ $json.HTML }}\", \"options\": {}, \"destinationKey\": \"page_content\"}, \"typeVersion\": 1}, {\"id\": \"11806e8c-5fc4-4d9d-8144-179356993aa7\", \"name\": \"Send Page Content\", \"type\": \"n8n-nodes-base.set\", \"position\": [2740, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"page_content\", \"stringValue\": \"={{ $json.page_content.length < $('CONFIG').first()?.json?.query?.maxlimit ? $json.page_content : \\\"ERROR: PAGE CONTENT TOO LONG\\\" }}\"}, {\"name\": \"page_length\", \"type\": \"numberValue\", \"numberValue\": \"={{ $json.page_content.length }}\"}]}, \"include\": \"selected\", \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"a3a6b199-517b-4987-8281-d7997a32f54b\", \"name\": \"HTTP_Request_Tool\", \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\", \"position\": [1103, 896], \"parameters\": {\"name\": \"HTTP_Request_Tool\", \"workflowId\": \"={{ $workflow.id }}\", \"description\": \"Call this tool to fetch a webpage content. The input should be a stringified HTTP query parameter like this: \\\"?url=VALIDURL&method=SELECTEDMETHOD\\\". \\\"url\\\" parameter should contain the valid URL string. \\\"method\\\" key can be either \\\"full\\\" or \\\"simplified\\\". method=full will fetch the whole webpage content in the Markdown format, including page links and image links. method=simplified will return the Markdown content of the page but remove urls and image links from the page content for simplicity. Before calling this tool, think strategically which \\\"method\\\" to call. Best of all to use method=simplified. However, if you anticipate that the page request is not final or if you need to extract links from the page, pick method=full.\", \"responsePropertyName\": \"page_content\"}, \"typeVersion\": 1}], \"active\": false, \"pinData\": {}, \"settings\": {\"executionOrder\": \"v1\"}, \"versionId\": \"9db853c5-3658-47c1-b98a-5858b1c184ec\", \"connections\": {\"CONFIG\": {\"main\": [[{\"node\": \"HTTP Request\", \"type\": \"main\", \"index\": 0}]]}, \"Is error?\": {\"main\": [[{\"node\": \"Stringify error message\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Exctract HTML Body\", \"type\": \"main\", \"index\": 0}]]}, \"Simplify?\": {\"main\": [[{\"node\": \"Simplify output\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Convert to Markdown\", \"type\": \"main\", \"index\": 0}]]}, \"HTTP Request\": {\"main\": [[{\"node\": \"Is error?\", \"type\": \"main\", \"index\": 0}]]}, \"QUERY_PARAMS\": {\"main\": [[{\"node\": \"CONFIG\", \"type\": \"main\", \"index\": 0}]]}, \"Simplify output\": {\"main\": [[{\"node\": \"Convert to Markdown\", \"type\": \"main\", \"index\": 0}]]}, \"HTTP_Request_Tool\": {\"ai_tool\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"OpenAI Chat Model\": {\"ai_languageModel\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Remove extra tags\": {\"main\": [[{\"node\": \"Simplify?\", \"type\": \"main\", \"index\": 0}]]}, \"Exctract HTML Body\": {\"main\": [[{\"node\": \"Remove extra tags\", \"type\": \"main\", \"index\": 0}]]}, \"Convert to Markdown\": {\"main\": [[{\"node\": \"Send Page Content\", \"type\": \"main\", \"index\": 0}]]}, \"Execute Workflow Trigger\": {\"main\": [[{\"node\": \"QUERY_PARAMS\", \"type\": \"main\", \"index\": 0}]]}, \"On new manual Chat Message\": {\"main\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"main\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "Explain a workflow in N8N that uses OpenAI for processing chat messages and formatting HTTP responses."}, {"role": "assistant", "content": "{\"id\": \"dsKnCFwysROIA4MT\", \"meta\": {\"instanceId\": \"03524270bab2c2dfd5b82778cd1355e56cdda3cf098bf2dfd865e18164c00485\"}, \"name\": \"Agent with custom HTTP Request\",  \"tags\": [], \"nodes\": [{\"id\": \"e7374976-f3c1-4f60-ae57-9eec65444216\", \"name\": \"On new manual Chat Message\", \"type\": \"@n8n/n8n-nodes-langchain.manualChatTrigger\", \"position\": [763, 676], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"97e84a23-9536-43cd-94e9-b8166be8ed32\", \"name\": \"OpenAI Chat Model\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [983, 896], \"parameters\": {\"model\": \"gpt-4-1106-preview\", \"options\": {\"timeout\": 300000, \"temperature\": 0.7, \"frequencyPenalty\": 0.3}}, \"credentials\": {\"openAiApi\": {\"id\": \"wPFAzp4ZHdLLwvkK\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"63d98361-8978-4042-84e7-53a0e226f946\", \"name\": \"HTTP Request\", \"type\": \"n8n-nodes-base.httpRequest\", \"onError\": \"continueRegularOutput\", \"position\": [1360, 1200], \"parameters\": {\"url\": \"={{ encodeURI($json.query.url) }}\", \"options\": {\"response\": {\"response\": {\"neverError\": true}}, \"allowUnauthorizedCerts\": true}}, \"typeVersion\": 4.1, \"alwaysOutputData\": false}, {\"id\": \"17d4b5ae-f5d3-4793-8419-d3c879f7f50d\", \"name\": \"Exctract HTML Body\", \"type\": \"n8n-nodes-base.set\", \"position\": [1780, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ $json?.data.match(/<body[^>]*>([\\\\s\\\\S]*?)<\\\\/body>/i)[1] }}\"}]}, \"include\": \"selected\", \"options\": {}, \"includeFields\": \"HTML\"}, \"typeVersion\": 3.2}, {\"id\": \"36c38ee4-724c-4ba2-a59a-ac0bbc912e94\", \"name\": \"Is error?\", \"type\": \"n8n-nodes-base.if\", \"position\": [1560, 1200], \"parameters\": {\"conditions\": {\"boolean\": [{\"value1\": \"={{ $json.hasOwnProperty('error') }}\", \"value2\": true}]}}, \"typeVersion\": 1}, {\"id\": \"4e4d97ce-14a9-4f4f-aa75-f218784d9ed9\", \"name\": \"Stringify error message\", \"type\": \"n8n-nodes-base.set\", \"position\": [1780, 980], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"page_content\", \"stringValue\": \"={{ $('QUERY_PARAMS').first()?.json?.query?.url == null ? \\\"INVALID action_input. This should be an HTTP query string like this: \\\\\\\"?url=VALIDURL&method=SELECTEDMETHOD\\\\\\\". Only a simple string value is accepted. JSON object as an action_input is NOT supported!\\\" : JSON.stringify($json.error) }}\"}]}, \"include\": \"selected\", \"options\": {}, \"includeFields\": \"HTML\"}, \"typeVersion\": 3.2}, {\"id\": \"8452e5c4-aa29-4a02-9579-8d9da3727bcb\", \"name\": \"Execute Workflow Trigger\", \"type\": \"n8n-nodes-base.executeWorkflowTrigger\", \"position\": [760, 1200], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"063220c2-fa4d-4d5e-9549-7712aaa72921\", \"name\": \"Remove extra tags\", \"type\": \"n8n-nodes-base.set\", \"position\": [1980, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ ($json.HTML || \\\"HTML BODY CONTENT FOR THIS SEARCH RESULT IS NOT AVAILABLE\\\").replace(/<script[^>]*>([\\\\s\\\\S]*?)<\\\\/script>|<style[^>]*>([\\\\s\\\\S]*?)<\\\\/style>|<noscript[^>]*>([\\\\s\\\\S]*?)<\\\\/noscript>|<!--[\\\\s\\\\S]*?-->|<iframe[^>]*>([\\\\s\\\\S]*?)<\\\\/iframe>|<object[^>]*>([\\\\s\\\\S]*?)<\\\\/object>|<embed[^>]*>([\\\\s\\\\S]*?)<\\\\/embed>|<video[^>]*>([\\\\s\\\\S]*?)<\\\\/video>|<audio[^>]*>([\\\\s\\\\S]*?)<\\\\/audio>|<svg[^>]*>([\\\\s\\\\S]*?)<\\\\/svg>/ig, '')}}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"036511d7-a4be-4bbf-b4bc-47ddfabfe76f\", \"name\": \"Simplify output\", \"type\": \"n8n-nodes-base.set\", \"notes\": \"remove links and image URLs\", \"position\": [2360, 1380], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ $json.HTML.replace(/href\\\\s*=\\\\s*\\\"(.+?)\\\"/gi, 'href=\\\"NOURL\\\"').replace(/src\\\\s*=\\\\s*\\\"(.+?)\\\"/gi, 'src=\\\"NOIMG\\\"')}}\"}]}, \"options\": {}}, \"notesInFlow\": true, \"typeVersion\": 3.2}, {\"id\": \"5e2b5383-adcf-4de0-a406-4f5d631b5e8a\", \"name\": \"Simplify?\", \"type\": \"n8n-nodes-base.if\", \"position\": [2180, 1480], \"parameters\": {\"conditions\": {\"string\": [{\"value1\": \"={{ $('CONFIG').first()?.json?.query?.method }}\", \"value2\": \"simplif\", \"operation\": \"contains\"}]}}, \"typeVersion\": 1}, {\"id\": \"a0fc004a-ab0f-4b31-94df-50f5eee69c86\", \"name\": \"QUERY_PARAMS\", \"type\": \"n8n-nodes-base.set\", \"position\": [960, 1200], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"query\", \"type\": \"objectValue\", \"objectValue\": \"={{ $json.query.substring($json.query.indexOf('?') + 1).split('&').reduce((result, item) => (result[item.split('=')[0]] = decodeURIComponent(item.split('=')[1]), result), {}) }}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"3b6599d6-ce9a-4861-9b52-07156eb52539\", \"name\": \"CONFIG\", \"type\": \"n8n-nodes-base.set\", \"position\": [1160, 1200], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"query.maxlimit\", \"type\": \"numberValue\", \"numberValue\": \"={{ $json?.query?.maxlimit == null ? 70000 : Number($json?.query?.maxlimit) }}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"14f683be-76f6-4034-9a0e-d785738b135f\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [721, 1134], \"parameters\": {\"width\": 556.25, \"height\": 235.79999999999995, \"content\": \"### Convert the query string into JSON, apply the limit for a page length\"}, \"typeVersion\": 1}, {\"id\": \"6deabcb7-a984-48ec-af2a-8c70b3a4e4bf\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1720, 840], \"parameters\": {\"width\": 491, \"height\": 285.7, \"content\": \"## Send an error message:\\n1. If query param was incorrect, return the instruction. AI Agent should pick up on this and adapt the query on the next iteration.\\n2. If the query is OK and an error was during the HTTP Request, then send back the original error message.\"}, \"typeVersion\": 1}, {\"id\": \"df1e8d00-0e18-44fa-8f94-8a53c27f7c88\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1720, 1160], \"parameters\": {\"width\": 1200, \"height\": 472.5, \"content\": \"## Post-processing of the HTML page:\\n1. Keep only <BODY> content\\n2. Remove inline <SCRIPT> tag entirely, as well as: NOSCRIPT, IFRAME, OBJECT, EMBED, VIDEO, AUDIO, SVG, and HTML comments.\\n3. In case query parameter method=simplified, replace all page URLs (a href) and IMG (src) with NOURL / NOIMG - this may save up to 20% of the page length\\n4. Convert the remaining HTML to Markdown. This step further reduces the length of the page: long HTML tags and styles are eliminated, but the markdown syntax keeps some page structure. This gives much better results compared to just a blank text.\\n5. Finally, check the page length. If it's too long, send an \\\"ERROR: PAGE CONTENT TOO LONG\\\" instead of the actual page. Of course, you could split the page content in chunks, but sometimes long pages just don't have a needed content, so it makes little sense to burn tokens on them.\"}, \"typeVersion\": 1}, {\"id\": \"6afe96a0-0fba-4ae1-ab8f-f7da56d420b1\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [720, 540], \"parameters\": {\"width\": 616.8597285067872, \"height\": 483.0226244343891, \"content\": \"## Example ReAct AI Agent\\n1. Agent Prompt is default\\n2. Check the description of the HTTP_Request_Tool, it guides the agent to provide a query string with several parameters instead of a JSON object\"}, \"typeVersion\": 1}, {\"id\": \"d5ff2114-1e74-43cf-9f3c-744c241988db\", \"name\": \"ReAct AI Agent\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"position\": [983, 676], \"parameters\": {\"agent\": \"reActAgent\", \"options\": {\"prefix\": \"Answer the following questions as best you can. You have access to the following tools:\", \"suffix\": \"Begin!\\n\\n\\tQuestion: {input}\\n\\tThought:{agent_scratchpad}\", \"suffixChat\": \"Begin! Reminder to always use the exact characters `Final Answer` when responding.\", \"humanMessageTemplate\": \"{input}\\n\\n{agent_scratchpad}\"}}, \"typeVersion\": 1}, {\"id\": \"cc7aef4a-a1fb-4a69-a670-1f200f9e9541\", \"name\": \"Convert to Markdown\", \"type\": \"n8n-nodes-base.markdown\", \"position\": [2540, 1480], \"parameters\": {\"html\": \"={{ $json.HTML }}\", \"options\": {}, \"destinationKey\": \"page_content\"}, \"typeVersion\": 1}, {\"id\": \"11806e8c-5fc4-4d9d-8144-179356993aa7\", \"name\": \"Send Page Content\", \"type\": \"n8n-nodes-base.set\", \"position\": [2740, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"page_content\", \"stringValue\": \"={{ $json.page_content.length < $('CONFIG').first()?.json?.query?.maxlimit ? $json.page_content : \\\"ERROR: PAGE CONTENT TOO LONG\\\" }}\"}, {\"name\": \"page_length\", \"type\": \"numberValue\", \"numberValue\": \"={{ $json.page_content.length }}\"}]}, \"include\": \"selected\", \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"a3a6b199-517b-4987-8281-d7997a32f54b\", \"name\": \"HTTP_Request_Tool\", \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\", \"position\": [1103, 896], \"parameters\": {\"name\": \"HTTP_Request_Tool\", \"workflowId\": \"={{ $workflow.id }}\", \"description\": \"Call this tool to fetch a webpage content. The input should be a stringified HTTP query parameter like this: \\\"?url=VALIDURL&method=SELECTEDMETHOD\\\". \\\"url\\\" parameter should contain the valid URL string. \\\"method\\\" key can be either \\\"full\\\" or \\\"simplified\\\". method=full will fetch the whole webpage content in the Markdown format, including page links and image links. method=simplified will return the Markdown content of the page but remove urls and image links from the page content for simplicity. Before calling this tool, think strategically which \\\"method\\\" to call. Best of all to use method=simplified. However, if you anticipate that the page request is not final or if you need to extract links from the page, pick method=full.\", \"responsePropertyName\": \"page_content\"}, \"typeVersion\": 1}], \"active\": false, \"pinData\": {}, \"settings\": {\"executionOrder\": \"v1\"}, \"versionId\": \"9db853c5-3658-47c1-b98a-5858b1c184ec\", \"connections\": {\"CONFIG\": {\"main\": [[{\"node\": \"HTTP Request\", \"type\": \"main\", \"index\": 0}]]}, \"Is error?\": {\"main\": [[{\"node\": \"Stringify error message\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Exctract HTML Body\", \"type\": \"main\", \"index\": 0}]]}, \"Simplify?\": {\"main\": [[{\"node\": \"Simplify output\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Convert to Markdown\", \"type\": \"main\", \"index\": 0}]]}, \"HTTP Request\": {\"main\": [[{\"node\": \"Is error?\", \"type\": \"main\", \"index\": 0}]]}, \"QUERY_PARAMS\": {\"main\": [[{\"node\": \"CONFIG\", \"type\": \"main\", \"index\": 0}]]}, \"Simplify output\": {\"main\": [[{\"node\": \"Convert to Markdown\", \"type\": \"main\", \"index\": 0}]]}, \"HTTP_Request_Tool\": {\"ai_tool\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"OpenAI Chat Model\": {\"ai_languageModel\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Remove extra tags\": {\"main\": [[{\"node\": \"Simplify?\", \"type\": \"main\", \"index\": 0}]]}, \"Exctract HTML Body\": {\"main\": [[{\"node\": \"Remove extra tags\", \"type\": \"main\", \"index\": 0}]]}, \"Convert to Markdown\": {\"main\": [[{\"node\": \"Send Page Content\", \"type\": \"main\", \"index\": 0}]]}, \"Execute Workflow Trigger\": {\"main\": [[{\"node\": \"QUERY_PARAMS\", \"type\": \"main\", \"index\": 0}]]}, \"On new manual Chat Message\": {\"main\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"main\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "What is a workflow structure in N8N that integrates chat triggers, AI agents, and HTTP requests with error management?"}, {"role": "assistant", "content": "{\"id\": \"dsKnCFwysROIA4MT\", \"meta\": {\"instanceId\": \"03524270bab2c2dfd5b82778cd1355e56cdda3cf098bf2dfd865e18164c00485\"}, \"name\": \"Agent with custom HTTP Request\",  \"tags\": [], \"nodes\": [{\"id\": \"e7374976-f3c1-4f60-ae57-9eec65444216\", \"name\": \"On new manual Chat Message\", \"type\": \"@n8n/n8n-nodes-langchain.manualChatTrigger\", \"position\": [763, 676], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"97e84a23-9536-43cd-94e9-b8166be8ed32\", \"name\": \"OpenAI Chat Model\", \"type\": \"@n8n/n8n-nodes-langchain.lmChatOpenAi\", \"position\": [983, 896], \"parameters\": {\"model\": \"gpt-4-1106-preview\", \"options\": {\"timeout\": 300000, \"temperature\": 0.7, \"frequencyPenalty\": 0.3}}, \"credentials\": {\"openAiApi\": {\"id\": \"wPFAzp4ZHdLLwvkK\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"63d98361-8978-4042-84e7-53a0e226f946\", \"name\": \"HTTP Request\", \"type\": \"n8n-nodes-base.httpRequest\", \"onError\": \"continueRegularOutput\", \"position\": [1360, 1200], \"parameters\": {\"url\": \"={{ encodeURI($json.query.url) }}\", \"options\": {\"response\": {\"response\": {\"neverError\": true}}, \"allowUnauthorizedCerts\": true}}, \"typeVersion\": 4.1, \"alwaysOutputData\": false}, {\"id\": \"17d4b5ae-f5d3-4793-8419-d3c879f7f50d\", \"name\": \"Exctract HTML Body\", \"type\": \"n8n-nodes-base.set\", \"position\": [1780, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ $json?.data.match(/<body[^>]*>([\\\\s\\\\S]*?)<\\\\/body>/i)[1] }}\"}]}, \"include\": \"selected\", \"options\": {}, \"includeFields\": \"HTML\"}, \"typeVersion\": 3.2}, {\"id\": \"36c38ee4-724c-4ba2-a59a-ac0bbc912e94\", \"name\": \"Is error?\", \"type\": \"n8n-nodes-base.if\", \"position\": [1560, 1200], \"parameters\": {\"conditions\": {\"boolean\": [{\"value1\": \"={{ $json.hasOwnProperty('error') }}\", \"value2\": true}]}}, \"typeVersion\": 1}, {\"id\": \"4e4d97ce-14a9-4f4f-aa75-f218784d9ed9\", \"name\": \"Stringify error message\", \"type\": \"n8n-nodes-base.set\", \"position\": [1780, 980], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"page_content\", \"stringValue\": \"={{ $('QUERY_PARAMS').first()?.json?.query?.url == null ? \\\"INVALID action_input. This should be an HTTP query string like this: \\\\\\\"?url=VALIDURL&method=SELECTEDMETHOD\\\\\\\". Only a simple string value is accepted. JSON object as an action_input is NOT supported!\\\" : JSON.stringify($json.error) }}\"}]}, \"include\": \"selected\", \"options\": {}, \"includeFields\": \"HTML\"}, \"typeVersion\": 3.2}, {\"id\": \"8452e5c4-aa29-4a02-9579-8d9da3727bcb\", \"name\": \"Execute Workflow Trigger\", \"type\": \"n8n-nodes-base.executeWorkflowTrigger\", \"position\": [760, 1200], \"parameters\": {}, \"typeVersion\": 1}, {\"id\": \"063220c2-fa4d-4d5e-9549-7712aaa72921\", \"name\": \"Remove extra tags\", \"type\": \"n8n-nodes-base.set\", \"position\": [1980, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ ($json.HTML || \\\"HTML BODY CONTENT FOR THIS SEARCH RESULT IS NOT AVAILABLE\\\").replace(/<script[^>]*>([\\\\s\\\\S]*?)<\\\\/script>|<style[^>]*>([\\\\s\\\\S]*?)<\\\\/style>|<noscript[^>]*>([\\\\s\\\\S]*?)<\\\\/noscript>|<!--[\\\\s\\\\S]*?-->|<iframe[^>]*>([\\\\s\\\\S]*?)<\\\\/iframe>|<object[^>]*>([\\\\s\\\\S]*?)<\\\\/object>|<embed[^>]*>([\\\\s\\\\S]*?)<\\\\/embed>|<video[^>]*>([\\\\s\\\\S]*?)<\\\\/video>|<audio[^>]*>([\\\\s\\\\S]*?)<\\\\/audio>|<svg[^>]*>([\\\\s\\\\S]*?)<\\\\/svg>/ig, '')}}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"036511d7-a4be-4bbf-b4bc-47ddfabfe76f\", \"name\": \"Simplify output\", \"type\": \"n8n-nodes-base.set\", \"notes\": \"remove links and image URLs\", \"position\": [2360, 1380], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"HTML\", \"stringValue\": \"={{ $json.HTML.replace(/href\\\\s*=\\\\s*\\\"(.+?)\\\"/gi, 'href=\\\"NOURL\\\"').replace(/src\\\\s*=\\\\s*\\\"(.+?)\\\"/gi, 'src=\\\"NOIMG\\\"')}}\"}]}, \"options\": {}}, \"notesInFlow\": true, \"typeVersion\": 3.2}, {\"id\": \"5e2b5383-adcf-4de0-a406-4f5d631b5e8a\", \"name\": \"Simplify?\", \"type\": \"n8n-nodes-base.if\", \"position\": [2180, 1480], \"parameters\": {\"conditions\": {\"string\": [{\"value1\": \"={{ $('CONFIG').first()?.json?.query?.method }}\", \"value2\": \"simplif\", \"operation\": \"contains\"}]}}, \"typeVersion\": 1}, {\"id\": \"a0fc004a-ab0f-4b31-94df-50f5eee69c86\", \"name\": \"QUERY_PARAMS\", \"type\": \"n8n-nodes-base.set\", \"position\": [960, 1200], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"query\", \"type\": \"objectValue\", \"objectValue\": \"={{ $json.query.substring($json.query.indexOf('?') + 1).split('&').reduce((result, item) => (result[item.split('=')[0]] = decodeURIComponent(item.split('=')[1]), result), {}) }}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"3b6599d6-ce9a-4861-9b52-07156eb52539\", \"name\": \"CONFIG\", \"type\": \"n8n-nodes-base.set\", \"position\": [1160, 1200], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"query.maxlimit\", \"type\": \"numberValue\", \"numberValue\": \"={{ $json?.query?.maxlimit == null ? 70000 : Number($json?.query?.maxlimit) }}\"}]}, \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"14f683be-76f6-4034-9a0e-d785738b135f\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [721, 1134], \"parameters\": {\"width\": 556.25, \"height\": 235.79999999999995, \"content\": \"### Convert the query string into JSON, apply the limit for a page length\"}, \"typeVersion\": 1}, {\"id\": \"6deabcb7-a984-48ec-af2a-8c70b3a4e4bf\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1720, 840], \"parameters\": {\"width\": 491, \"height\": 285.7, \"content\": \"## Send an error message:\\n1. If query param was incorrect, return the instruction. AI Agent should pick up on this and adapt the query on the next iteration.\\n2. If the query is OK and an error was during the HTTP Request, then send back the original error message.\"}, \"typeVersion\": 1}, {\"id\": \"df1e8d00-0e18-44fa-8f94-8a53c27f7c88\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1720, 1160], \"parameters\": {\"width\": 1200, \"height\": 472.5, \"content\": \"## Post-processing of the HTML page:\\n1. Keep only <BODY> content\\n2. Remove inline <SCRIPT> tag entirely, as well as: NOSCRIPT, IFRAME, OBJECT, EMBED, VIDEO, AUDIO, SVG, and HTML comments.\\n3. In case query parameter method=simplified, replace all page URLs (a href) and IMG (src) with NOURL / NOIMG - this may save up to 20% of the page length\\n4. Convert the remaining HTML to Markdown. This step further reduces the length of the page: long HTML tags and styles are eliminated, but the markdown syntax keeps some page structure. This gives much better results compared to just a blank text.\\n5. Finally, check the page length. If it's too long, send an \\\"ERROR: PAGE CONTENT TOO LONG\\\" instead of the actual page. Of course, you could split the page content in chunks, but sometimes long pages just don't have a needed content, so it makes little sense to burn tokens on them.\"}, \"typeVersion\": 1}, {\"id\": \"6afe96a0-0fba-4ae1-ab8f-f7da56d420b1\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [720, 540], \"parameters\": {\"width\": 616.8597285067872, \"height\": 483.0226244343891, \"content\": \"## Example ReAct AI Agent\\n1. Agent Prompt is default\\n2. Check the description of the HTTP_Request_Tool, it guides the agent to provide a query string with several parameters instead of a JSON object\"}, \"typeVersion\": 1}, {\"id\": \"d5ff2114-1e74-43cf-9f3c-744c241988db\", \"name\": \"ReAct AI Agent\", \"type\": \"@n8n/n8n-nodes-langchain.agent\", \"position\": [983, 676], \"parameters\": {\"agent\": \"reActAgent\", \"options\": {\"prefix\": \"Answer the following questions as best you can. You have access to the following tools:\", \"suffix\": \"Begin!\\n\\n\\tQuestion: {input}\\n\\tThought:{agent_scratchpad}\", \"suffixChat\": \"Begin! Reminder to always use the exact characters `Final Answer` when responding.\", \"humanMessageTemplate\": \"{input}\\n\\n{agent_scratchpad}\"}}, \"typeVersion\": 1}, {\"id\": \"cc7aef4a-a1fb-4a69-a670-1f200f9e9541\", \"name\": \"Convert to Markdown\", \"type\": \"n8n-nodes-base.markdown\", \"position\": [2540, 1480], \"parameters\": {\"html\": \"={{ $json.HTML }}\", \"options\": {}, \"destinationKey\": \"page_content\"}, \"typeVersion\": 1}, {\"id\": \"11806e8c-5fc4-4d9d-8144-179356993aa7\", \"name\": \"Send Page Content\", \"type\": \"n8n-nodes-base.set\", \"position\": [2740, 1480], \"parameters\": {\"fields\": {\"values\": [{\"name\": \"page_content\", \"stringValue\": \"={{ $json.page_content.length < $('CONFIG').first()?.json?.query?.maxlimit ? $json.page_content : \\\"ERROR: PAGE CONTENT TOO LONG\\\" }}\"}, {\"name\": \"page_length\", \"type\": \"numberValue\", \"numberValue\": \"={{ $json.page_content.length }}\"}]}, \"include\": \"selected\", \"options\": {}}, \"typeVersion\": 3.2}, {\"id\": \"a3a6b199-517b-4987-8281-d7997a32f54b\", \"name\": \"HTTP_Request_Tool\", \"type\": \"@n8n/n8n-nodes-langchain.toolWorkflow\", \"position\": [1103, 896], \"parameters\": {\"name\": \"HTTP_Request_Tool\", \"workflowId\": \"={{ $workflow.id }}\", \"description\": \"Call this tool to fetch a webpage content. The input should be a stringified HTTP query parameter like this: \\\"?url=VALIDURL&method=SELECTEDMETHOD\\\". \\\"url\\\" parameter should contain the valid URL string. \\\"method\\\" key can be either \\\"full\\\" or \\\"simplified\\\". method=full will fetch the whole webpage content in the Markdown format, including page links and image links. method=simplified will return the Markdown content of the page but remove urls and image links from the page content for simplicity. Before calling this tool, think strategically which \\\"method\\\" to call. Best of all to use method=simplified. However, if you anticipate that the page request is not final or if you need to extract links from the page, pick method=full.\", \"responsePropertyName\": \"page_content\"}, \"typeVersion\": 1}], \"active\": false, \"pinData\": {}, \"settings\": {\"executionOrder\": \"v1\"}, \"versionId\": \"9db853c5-3658-47c1-b98a-5858b1c184ec\", \"connections\": {\"CONFIG\": {\"main\": [[{\"node\": \"HTTP Request\", \"type\": \"main\", \"index\": 0}]]}, \"Is error?\": {\"main\": [[{\"node\": \"Stringify error message\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Exctract HTML Body\", \"type\": \"main\", \"index\": 0}]]}, \"Simplify?\": {\"main\": [[{\"node\": \"Simplify output\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Convert to Markdown\", \"type\": \"main\", \"index\": 0}]]}, \"HTTP Request\": {\"main\": [[{\"node\": \"Is error?\", \"type\": \"main\", \"index\": 0}]]}, \"QUERY_PARAMS\": {\"main\": [[{\"node\": \"CONFIG\", \"type\": \"main\", \"index\": 0}]]}, \"Simplify output\": {\"main\": [[{\"node\": \"Convert to Markdown\", \"type\": \"main\", \"index\": 0}]]}, \"HTTP_Request_Tool\": {\"ai_tool\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"ai_tool\", \"index\": 0}]]}, \"OpenAI Chat Model\": {\"ai_languageModel\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"ai_languageModel\", \"index\": 0}]]}, \"Remove extra tags\": {\"main\": [[{\"node\": \"Simplify?\", \"type\": \"main\", \"index\": 0}]]}, \"Exctract HTML Body\": {\"main\": [[{\"node\": \"Remove extra tags\", \"type\": \"main\", \"index\": 0}]]}, \"Convert to Markdown\": {\"main\": [[{\"node\": \"Send Page Content\", \"type\": \"main\", \"index\": 0}]]}, \"Execute Workflow Trigger\": {\"main\": [[{\"node\": \"QUERY_PARAMS\", \"type\": \"main\", \"index\": 0}]]}, \"On new manual Chat Message\": {\"main\": [[{\"node\": \"ReAct AI Agent\", \"type\": \"main\", \"index\": 0}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "How can I create a workflow in N8N to handle Telegram bot commands with AI responses?"}, {"role": "assistant", "content": "{\"id\": \"177\", \"meta\": {\"instanceId\": \"dfdeafd1c3ed2ee08eeab8c2fa0c3f522066931ed8138ccd35dc20a1e69decd3\"}, \"name\": \"Telegram AI-bot\", \"tags\": [{\"id\": \"15\", \"name\": \"tutorial\", \"createdAt\": \"2022-10-04T20:07:25.607Z\", \"updatedAt\": \"2022-10-04T20:07:25.607Z\"}], \"nodes\": [{\"id\": \"ea71a467-a646-4aca-b72e-cef1249c74e2\", \"name\": \"Telegram Trigger\", \"type\": \"n8n-nodes-base.telegramTrigger\", \"position\": [20, 340], \"webhookId\": \"51942fbb-ca0e-4ec4-9423-5fcc7d3c4281\", \"parameters\": {\"updates\": [\"*\"], \"additionalFields\": {}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"1cbe43d4-ea8b-4178-bc10-4bfad7abe143\", \"name\": \"CheckCommand\", \"type\": \"n8n-nodes-base.switch\", \"position\": [980, 360], \"parameters\": {\"rules\": {\"rules\": [{\"value2\": \"/\", \"operation\": \"notStartsWith\"}, {\"output\": 1, \"value2\": \"/start\", \"operation\": \"startsWith\"}, {\"output\": 2, \"value2\": \"=/image \", \"operation\": \"startsWith\"}]}, \"value1\": \"={{ $json.message?.text }}\", \"dataType\": \"string\", \"fallbackOutput\": 3}, \"typeVersion\": 1}, {\"id\": \"074e907f-634b-4242-b669-33fa064f8472\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1600, 581.661764705882], \"parameters\": {\"width\": 316.1071428571428, \"height\": 231.22373949579838, \"content\": \"## Error fallback for unsupported commands\"}, \"typeVersion\": 1}, {\"id\": \"2aa961b8-f0af-4d5c-a6af-1be56ea4b2e6\", \"name\": \"Settings\", \"type\": \"n8n-nodes-base.set\", \"position\": [380, 340], \"parameters\": {\"values\": {\"number\": [{\"name\": \"model_temperature\", \"value\": 0.8}, {\"name\": \"token_length\", \"value\": 500}], \"string\": [{\"name\": \"system_command\", \"value\": \"=You are a friendly chatbot. User name is {{ $json?.message?.from?.first_name }}. User system language is {{ $json?.message?.from?.language_code }}. First, detect user text language. Next, provide your reply in the same language. Include several suitable emojis in your answer.\"}, {\"name\": \"bot_typing\", \"value\": \"={{ $json?.message?.text.startsWith('/image') ? \\\"upload_photo\\\" : \\\"typing\\\" }}\"}]}, \"options\": {}}, \"typeVersion\": 2}, {\"id\": \"2d2fe268-1e3e-483b-847c-4412e586c1ca\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, -240], \"parameters\": {\"width\": 330.5019024637719, \"height\": 233, \"content\": \"## Chatbot mode by default\\n### (when no command is provided)\"}, \"typeVersion\": 1}, {\"id\": \"09a9c0b4-ac6e-46eb-b2e0-ef2b55e94ada\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, 20], \"parameters\": {\"width\": 330.7863484403046, \"height\": 219.892857142857, \"content\": \"## Welcome message\\n### /start\"}, \"typeVersion\": 1}, {\"id\": \"088cffee-5720-488b-a4ec-cfdccbf77e75\", \"name\": \"Chat_mode\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, -160], \"parameters\": {\"model\": \"gpt-4\", \"prompt\": {\"messages\": [{\"role\": \"system\", \"content\": \"={{ $json.system_command }}\"}, {\"content\": \"={{ $json.message.text }}\"}]}, \"options\": {\"maxTokens\": \"={{ $json.token_length }}\", \"temperature\": \"={{ $json.model_temperature }}\"}, \"resource\": \"chat\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"41248697-6474-4a8f-a8b8-038c96465948\", \"name\": \"Greeting\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, 80], \"parameters\": {\"prompt\": {\"messages\": [{\"role\": \"system\", \"content\": \"={{ $json.system_command }}\"}, {\"content\": \"=This is the first message from a user. Please welcome a new user in `{{ $json.message.from.language_code }}` language\"}]}, \"options\": {\"maxTokens\": \"={{ $json.token_length }}\", \"temperature\": \"={{ $json.model_temperature }}\"}, \"resource\": \"chat\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"20c2e7fa-5d65-441b-8d1d-a8d46c624964\", \"name\": \"Text reply\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, -40], \"parameters\": {\"text\": \"={{ $json.message.content }}\", \"chatId\": \"={{ $('Settings').first().json.message.from.id }}\", \"additionalFields\": {\"parse_mode\": \"Markdown\"}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"30321276-ebe1-41ac-b420-9dab8daa405b\", \"name\": \"Send Typing action\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [580, 480], \"parameters\": {\"action\": \"={{ $json.bot_typing }}\", \"chatId\": \"={{ $json.message.from.id }}\", \"operation\": \"sendChatAction\"}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"7d7ff2e8-b0ca-4638-a056-f7b4e2e6273d\", \"name\": \"Merge\", \"type\": \"n8n-nodes-base.merge\", \"position\": [800, 360], \"parameters\": {\"mode\": \"chooseBranch\"}, \"typeVersion\": 2.1}, {\"id\": \"656bab5e-b7f7-47a1-8e75-4a17d2070290\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, 280], \"parameters\": {\"width\": 329.7428571428562, \"height\": 233.8785714285713, \"content\": \"## Create an image\\n### /image + request\"}, \"typeVersion\": 1}, {\"id\": \"ca2111d2-463a-4ef0-9436-ee09598dbf07\", \"name\": \"Create an image\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, 360], \"parameters\": {\"prompt\": \"={{ $json.message.text.split(' ').slice(1).join(' ') }}\", \"options\": {\"n\": 1, \"size\": \"512x512\"}, \"resource\": \"image\", \"responseFormat\": \"imageUrl\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"e91d616b-1d5e-40e8-8468-2d0b2dda4cf7\", \"name\": \"Send error message\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, 660], \"parameters\": {\"text\": \"=Sorry, {{ $json.message.from.first_name }}! This command is not supported yet. Please type some text to a chat bot or try this command:\\n/image \\\\[your prompt]\\n\\nEnter the command, then space and provide your request. Example:\\n\\n`/image a picture or a cute little kitten with big eyes. Miyazaki studio ghibli style`\", \"chatId\": \"={{ $json.message.from.id }}\", \"additionalFields\": {\"parse_mode\": \"Markdown\"}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"125e27d2-b03b-4f02-9dd1-8fc81ecf0b6b\", \"name\": \"Send image\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, 360], \"parameters\": {\"file\": \"={{ $json.url }}\", \"chatId\": \"={{ $('Settings').first().json.message.from.id }}\", \"operation\": \"sendPhoto\", \"additionalFields\": {}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"730a51ac-223e-4956-be7f-166eadb6ed81\", \"name\": \"PreProcessing\", \"type\": \"n8n-nodes-base.set\", \"position\": [200, 340], \"parameters\": {\"values\": {\"string\": [{\"name\": \"message.text\", \"value\": \"={{ $json?.message?.text || \\\"\\\" }}\"}]}, \"options\": {\"dotNotation\": true}}, \"typeVersion\": 2}], \"active\": true, \"pinData\": {}, \"settings\": {\"callerPolicy\": \"workflowsFromSameOwner\", \"saveManualExecutions\": true, \"saveDataSuccessExecution\": \"all\"}, \"versionId\": \"6ab99e3f-845d-42cc-847b-37cf19a72e93\", \"connections\": {\"Merge\": {\"main\": [[{\"node\": \"CheckCommand\", \"type\": \"main\", \"index\": 0}]]}, \"Greeting\": {\"main\": [[{\"node\": \"Text reply\", \"type\": \"main\", \"index\": 0}]]}, \"Settings\": {\"main\": [[{\"node\": \"Send Typing action\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Merge\", \"type\": \"main\", \"index\": 0}]]}, \"Chat_mode\": {\"main\": [[{\"node\": \"Text reply\", \"type\": \"main\", \"index\": 0}]]}, \"CheckCommand\": {\"main\": [[{\"node\": \"Chat_mode\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Greeting\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Create an image\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Send error message\", \"type\": \"main\", \"index\": 0}]]}, \"PreProcessing\": {\"main\": [[{\"node\": \"Settings\", \"type\": \"main\", \"index\": 0}]]}, \"Create an image\": {\"main\": [[{\"node\": \"Send image\", \"type\": \"main\", \"index\": 0}]]}, \"Telegram Trigger\": {\"main\": [[{\"node\": \"PreProcessing\", \"type\": \"main\", \"index\": 0}]]}, \"Send Typing action\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 1}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "Show me an example of an N8N workflow that uses OpenAI to generate text and images in response to Telegram messages."}, {"role": "assistant", "content": "{\"id\": \"177\", \"meta\": {\"instanceId\": \"dfdeafd1c3ed2ee08eeab8c2fa0c3f522066931ed8138ccd35dc20a1e69decd3\"}, \"name\": \"Telegram AI-bot\", \"tags\": [{\"id\": \"15\", \"name\": \"tutorial\", \"createdAt\": \"2022-10-04T20:07:25.607Z\", \"updatedAt\": \"2022-10-04T20:07:25.607Z\"}], \"nodes\": [{\"id\": \"ea71a467-a646-4aca-b72e-cef1249c74e2\", \"name\": \"Telegram Trigger\", \"type\": \"n8n-nodes-base.telegramTrigger\", \"position\": [20, 340], \"webhookId\": \"51942fbb-ca0e-4ec4-9423-5fcc7d3c4281\", \"parameters\": {\"updates\": [\"*\"], \"additionalFields\": {}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"1cbe43d4-ea8b-4178-bc10-4bfad7abe143\", \"name\": \"CheckCommand\", \"type\": \"n8n-nodes-base.switch\", \"position\": [980, 360], \"parameters\": {\"rules\": {\"rules\": [{\"value2\": \"/\", \"operation\": \"notStartsWith\"}, {\"output\": 1, \"value2\": \"/start\", \"operation\": \"startsWith\"}, {\"output\": 2, \"value2\": \"=/image \", \"operation\": \"startsWith\"}]}, \"value1\": \"={{ $json.message?.text }}\", \"dataType\": \"string\", \"fallbackOutput\": 3}, \"typeVersion\": 1}, {\"id\": \"074e907f-634b-4242-b669-33fa064f8472\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1600, 581.661764705882], \"parameters\": {\"width\": 316.1071428571428, \"height\": 231.22373949579838, \"content\": \"## Error fallback for unsupported commands\"}, \"typeVersion\": 1}, {\"id\": \"2aa961b8-f0af-4d5c-a6af-1be56ea4b2e6\", \"name\": \"Settings\", \"type\": \"n8n-nodes-base.set\", \"position\": [380, 340], \"parameters\": {\"values\": {\"number\": [{\"name\": \"model_temperature\", \"value\": 0.8}, {\"name\": \"token_length\", \"value\": 500}], \"string\": [{\"name\": \"system_command\", \"value\": \"=You are a friendly chatbot. User name is {{ $json?.message?.from?.first_name }}. User system language is {{ $json?.message?.from?.language_code }}. First, detect user text language. Next, provide your reply in the same language. Include several suitable emojis in your answer.\"}, {\"name\": \"bot_typing\", \"value\": \"={{ $json?.message?.text.startsWith('/image') ? \\\"upload_photo\\\" : \\\"typing\\\" }}\"}]}, \"options\": {}}, \"typeVersion\": 2}, {\"id\": \"2d2fe268-1e3e-483b-847c-4412e586c1ca\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, -240], \"parameters\": {\"width\": 330.5019024637719, \"height\": 233, \"content\": \"## Chatbot mode by default\\n### (when no command is provided)\"}, \"typeVersion\": 1}, {\"id\": \"09a9c0b4-ac6e-46eb-b2e0-ef2b55e94ada\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, 20], \"parameters\": {\"width\": 330.7863484403046, \"height\": 219.892857142857, \"content\": \"## Welcome message\\n### /start\"}, \"typeVersion\": 1}, {\"id\": \"088cffee-5720-488b-a4ec-cfdccbf77e75\", \"name\": \"Chat_mode\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, -160], \"parameters\": {\"model\": \"gpt-4\", \"prompt\": {\"messages\": [{\"role\": \"system\", \"content\": \"={{ $json.system_command }}\"}, {\"content\": \"={{ $json.message.text }}\"}]}, \"options\": {\"maxTokens\": \"={{ $json.token_length }}\", \"temperature\": \"={{ $json.model_temperature }}\"}, \"resource\": \"chat\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"41248697-6474-4a8f-a8b8-038c96465948\", \"name\": \"Greeting\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, 80], \"parameters\": {\"prompt\": {\"messages\": [{\"role\": \"system\", \"content\": \"={{ $json.system_command }}\"}, {\"content\": \"=This is the first message from a user. Please welcome a new user in `{{ $json.message.from.language_code }}` language\"}]}, \"options\": {\"maxTokens\": \"={{ $json.token_length }}\", \"temperature\": \"={{ $json.model_temperature }}\"}, \"resource\": \"chat\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"20c2e7fa-5d65-441b-8d1d-a8d46c624964\", \"name\": \"Text reply\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, -40], \"parameters\": {\"text\": \"={{ $json.message.content }}\", \"chatId\": \"={{ $('Settings').first().json.message.from.id }}\", \"additionalFields\": {\"parse_mode\": \"Markdown\"}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"30321276-ebe1-41ac-b420-9dab8daa405b\", \"name\": \"Send Typing action\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [580, 480], \"parameters\": {\"action\": \"={{ $json.bot_typing }}\", \"chatId\": \"={{ $json.message.from.id }}\", \"operation\": \"sendChatAction\"}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"7d7ff2e8-b0ca-4638-a056-f7b4e2e6273d\", \"name\": \"Merge\", \"type\": \"n8n-nodes-base.merge\", \"position\": [800, 360], \"parameters\": {\"mode\": \"chooseBranch\"}, \"typeVersion\": 2.1}, {\"id\": \"656bab5e-b7f7-47a1-8e75-4a17d2070290\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, 280], \"parameters\": {\"width\": 329.7428571428562, \"height\": 233.8785714285713, \"content\": \"## Create an image\\n### /image + request\"}, \"typeVersion\": 1}, {\"id\": \"ca2111d2-463a-4ef0-9436-ee09598dbf07\", \"name\": \"Create an image\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, 360], \"parameters\": {\"prompt\": \"={{ $json.message.text.split(' ').slice(1).join(' ') }}\", \"options\": {\"n\": 1, \"size\": \"512x512\"}, \"resource\": \"image\", \"responseFormat\": \"imageUrl\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"e91d616b-1d5e-40e8-8468-2d0b2dda4cf7\", \"name\": \"Send error message\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, 660], \"parameters\": {\"text\": \"=Sorry, {{ $json.message.from.first_name }}! This command is not supported yet. Please type some text to a chat bot or try this command:\\n/image \\\\[your prompt]\\n\\nEnter the command, then space and provide your request. Example:\\n\\n`/image a picture or a cute little kitten with big eyes. Miyazaki studio ghibli style`\", \"chatId\": \"={{ $json.message.from.id }}\", \"additionalFields\": {\"parse_mode\": \"Markdown\"}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"125e27d2-b03b-4f02-9dd1-8fc81ecf0b6b\", \"name\": \"Send image\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, 360], \"parameters\": {\"file\": \"={{ $json.url }}\", \"chatId\": \"={{ $('Settings').first().json.message.from.id }}\", \"operation\": \"sendPhoto\", \"additionalFields\": {}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"730a51ac-223e-4956-be7f-166eadb6ed81\", \"name\": \"PreProcessing\", \"type\": \"n8n-nodes-base.set\", \"position\": [200, 340], \"parameters\": {\"values\": {\"string\": [{\"name\": \"message.text\", \"value\": \"={{ $json?.message?.text || \\\"\\\" }}\"}]}, \"options\": {\"dotNotation\": true}}, \"typeVersion\": 2}], \"active\": true, \"pinData\": {}, \"settings\": {\"callerPolicy\": \"workflowsFromSameOwner\", \"saveManualExecutions\": true, \"saveDataSuccessExecution\": \"all\"}, \"versionId\": \"6ab99e3f-845d-42cc-847b-37cf19a72e93\", \"connections\": {\"Merge\": {\"main\": [[{\"node\": \"CheckCommand\", \"type\": \"main\", \"index\": 0}]]}, \"Greeting\": {\"main\": [[{\"node\": \"Text reply\", \"type\": \"main\", \"index\": 0}]]}, \"Settings\": {\"main\": [[{\"node\": \"Send Typing action\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Merge\", \"type\": \"main\", \"index\": 0}]]}, \"Chat_mode\": {\"main\": [[{\"node\": \"Text reply\", \"type\": \"main\", \"index\": 0}]]}, \"CheckCommand\": {\"main\": [[{\"node\": \"Chat_mode\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Greeting\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Create an image\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Send error message\", \"type\": \"main\", \"index\": 0}]]}, \"PreProcessing\": {\"main\": [[{\"node\": \"Settings\", \"type\": \"main\", \"index\": 0}]]}, \"Create an image\": {\"main\": [[{\"node\": \"Send image\", \"type\": \"main\", \"index\": 0}]]}, \"Telegram Trigger\": {\"main\": [[{\"node\": \"PreProcessing\", \"type\": \"main\", \"index\": 0}]]}, \"Send Typing action\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 1}]]}}}"}]}
{"messages": [{"role": "system", "content": "You are an AI assistant helping users create N8N workflows."}, {"role": "user", "content": "Can you provide a workflow that processes Telegram commands and sends typing notifications before replying?"}, {"role": "assistant", "content": "{\"id\": \"177\", \"meta\": {\"instanceId\": \"dfdeafd1c3ed2ee08eeab8c2fa0c3f522066931ed8138ccd35dc20a1e69decd3\"}, \"name\": \"Telegram AI-bot\", \"tags\": [{\"id\": \"15\", \"name\": \"tutorial\", \"createdAt\": \"2022-10-04T20:07:25.607Z\", \"updatedAt\": \"2022-10-04T20:07:25.607Z\"}], \"nodes\": [{\"id\": \"ea71a467-a646-4aca-b72e-cef1249c74e2\", \"name\": \"Telegram Trigger\", \"type\": \"n8n-nodes-base.telegramTrigger\", \"position\": [20, 340], \"webhookId\": \"51942fbb-ca0e-4ec4-9423-5fcc7d3c4281\", \"parameters\": {\"updates\": [\"*\"], \"additionalFields\": {}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"1cbe43d4-ea8b-4178-bc10-4bfad7abe143\", \"name\": \"CheckCommand\", \"type\": \"n8n-nodes-base.switch\", \"position\": [980, 360], \"parameters\": {\"rules\": {\"rules\": [{\"value2\": \"/\", \"operation\": \"notStartsWith\"}, {\"output\": 1, \"value2\": \"/start\", \"operation\": \"startsWith\"}, {\"output\": 2, \"value2\": \"=/image \", \"operation\": \"startsWith\"}]}, \"value1\": \"={{ $json.message?.text }}\", \"dataType\": \"string\", \"fallbackOutput\": 3}, \"typeVersion\": 1}, {\"id\": \"074e907f-634b-4242-b669-33fa064f8472\", \"name\": \"Sticky Note\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1600, 581.661764705882], \"parameters\": {\"width\": 316.1071428571428, \"height\": 231.22373949579838, \"content\": \"## Error fallback for unsupported commands\"}, \"typeVersion\": 1}, {\"id\": \"2aa961b8-f0af-4d5c-a6af-1be56ea4b2e6\", \"name\": \"Settings\", \"type\": \"n8n-nodes-base.set\", \"position\": [380, 340], \"parameters\": {\"values\": {\"number\": [{\"name\": \"model_temperature\", \"value\": 0.8}, {\"name\": \"token_length\", \"value\": 500}], \"string\": [{\"name\": \"system_command\", \"value\": \"=You are a friendly chatbot. User name is {{ $json?.message?.from?.first_name }}. User system language is {{ $json?.message?.from?.language_code }}. First, detect user text language. Next, provide your reply in the same language. Include several suitable emojis in your answer.\"}, {\"name\": \"bot_typing\", \"value\": \"={{ $json?.message?.text.startsWith('/image') ? \\\"upload_photo\\\" : \\\"typing\\\" }}\"}]}, \"options\": {}}, \"typeVersion\": 2}, {\"id\": \"2d2fe268-1e3e-483b-847c-4412e586c1ca\", \"name\": \"Sticky Note1\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, -240], \"parameters\": {\"width\": 330.5019024637719, \"height\": 233, \"content\": \"## Chatbot mode by default\\n### (when no command is provided)\"}, \"typeVersion\": 1}, {\"id\": \"09a9c0b4-ac6e-46eb-b2e0-ef2b55e94ada\", \"name\": \"Sticky Note2\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, 20], \"parameters\": {\"width\": 330.7863484403046, \"height\": 219.892857142857, \"content\": \"## Welcome message\\n### /start\"}, \"typeVersion\": 1}, {\"id\": \"088cffee-5720-488b-a4ec-cfdccbf77e75\", \"name\": \"Chat_mode\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, -160], \"parameters\": {\"model\": \"gpt-4\", \"prompt\": {\"messages\": [{\"role\": \"system\", \"content\": \"={{ $json.system_command }}\"}, {\"content\": \"={{ $json.message.text }}\"}]}, \"options\": {\"maxTokens\": \"={{ $json.token_length }}\", \"temperature\": \"={{ $json.model_temperature }}\"}, \"resource\": \"chat\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"41248697-6474-4a8f-a8b8-038c96465948\", \"name\": \"Greeting\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, 80], \"parameters\": {\"prompt\": {\"messages\": [{\"role\": \"system\", \"content\": \"={{ $json.system_command }}\"}, {\"content\": \"=This is the first message from a user. Please welcome a new user in `{{ $json.message.from.language_code }}` language\"}]}, \"options\": {\"maxTokens\": \"={{ $json.token_length }}\", \"temperature\": \"={{ $json.model_temperature }}\"}, \"resource\": \"chat\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"20c2e7fa-5d65-441b-8d1d-a8d46c624964\", \"name\": \"Text reply\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, -40], \"parameters\": {\"text\": \"={{ $json.message.content }}\", \"chatId\": \"={{ $('Settings').first().json.message.from.id }}\", \"additionalFields\": {\"parse_mode\": \"Markdown\"}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"30321276-ebe1-41ac-b420-9dab8daa405b\", \"name\": \"Send Typing action\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [580, 480], \"parameters\": {\"action\": \"={{ $json.bot_typing }}\", \"chatId\": \"={{ $json.message.from.id }}\", \"operation\": \"sendChatAction\"}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"7d7ff2e8-b0ca-4638-a056-f7b4e2e6273d\", \"name\": \"Merge\", \"type\": \"n8n-nodes-base.merge\", \"position\": [800, 360], \"parameters\": {\"mode\": \"chooseBranch\"}, \"typeVersion\": 2.1}, {\"id\": \"656bab5e-b7f7-47a1-8e75-4a17d2070290\", \"name\": \"Sticky Note3\", \"type\": \"n8n-nodes-base.stickyNote\", \"position\": [1240, 280], \"parameters\": {\"width\": 329.7428571428562, \"height\": 233.8785714285713, \"content\": \"## Create an image\\n### /image + request\"}, \"typeVersion\": 1}, {\"id\": \"ca2111d2-463a-4ef0-9436-ee09598dbf07\", \"name\": \"Create an image\", \"type\": \"n8n-nodes-base.openAi\", \"position\": [1340, 360], \"parameters\": {\"prompt\": \"={{ $json.message.text.split(' ').slice(1).join(' ') }}\", \"options\": {\"n\": 1, \"size\": \"512x512\"}, \"resource\": \"image\", \"responseFormat\": \"imageUrl\"}, \"credentials\": {\"openAiApi\": {\"id\": \"63\", \"name\": \"OpenAi account\"}}, \"typeVersion\": 1}, {\"id\": \"e91d616b-1d5e-40e8-8468-2d0b2dda4cf7\", \"name\": \"Send error message\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, 660], \"parameters\": {\"text\": \"=Sorry, {{ $json.message.from.first_name }}! This command is not supported yet. Please type some text to a chat bot or try this command:\\n/image \\\\[your prompt]\\n\\nEnter the command, then space and provide your request. Example:\\n\\n`/image a picture or a cute little kitten with big eyes. Miyazaki studio ghibli style`\", \"chatId\": \"={{ $json.message.from.id }}\", \"additionalFields\": {\"parse_mode\": \"Markdown\"}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"125e27d2-b03b-4f02-9dd1-8fc81ecf0b6b\", \"name\": \"Send image\", \"type\": \"n8n-nodes-base.telegram\", \"position\": [1700, 360], \"parameters\": {\"file\": \"={{ $json.url }}\", \"chatId\": \"={{ $('Settings').first().json.message.from.id }}\", \"operation\": \"sendPhoto\", \"additionalFields\": {}}, \"credentials\": {\"telegramApi\": {\"id\": \"70\", \"name\": \"Telegram bot\"}}, \"typeVersion\": 1}, {\"id\": \"730a51ac-223e-4956-be7f-166eadb6ed81\", \"name\": \"PreProcessing\", \"type\": \"n8n-nodes-base.set\", \"position\": [200, 340], \"parameters\": {\"values\": {\"string\": [{\"name\": \"message.text\", \"value\": \"={{ $json?.message?.text || \\\"\\\" }}\"}]}, \"options\": {\"dotNotation\": true}}, \"typeVersion\": 2}], \"active\": true, \"pinData\": {}, \"settings\": {\"callerPolicy\": \"workflowsFromSameOwner\", \"saveManualExecutions\": true, \"saveDataSuccessExecution\": \"all\"}, \"versionId\": \"6ab99e3f-845d-42cc-847b-37cf19a72e93\", \"connections\": {\"Merge\": {\"main\": [[{\"node\": \"CheckCommand\", \"type\": \"main\", \"index\": 0}]]}, \"Greeting\": {\"main\": [[{\"node\": \"Text reply\", \"type\": \"main\", \"index\": 0}]]}, \"Settings\": {\"main\": [[{\"node\": \"Send Typing action\", \"type\": \"main\", \"index\": 0}, {\"node\": \"Merge\", \"type\": \"main\", \"index\": 0}]]}, \"Chat_mode\": {\"main\": [[{\"node\": \"Text reply\", \"type\": \"main\", \"index\": 0}]]}, \"CheckCommand\": {\"main\": [[{\"node\": \"Chat_mode\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Greeting\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Create an image\", \"type\": \"main\", \"index\": 0}], [{\"node\": \"Send error message\", \"type\": \"main\", \"index\": 0}]]}, \"PreProcessing\": {\"main\": [[{\"node\": \"Settings\", \"type\": \"main\", \"index\": 0}]]}, \"Create an image\": {\"main\": [[{\"node\": \"Send image\", \"type\": \"main\", \"index\": 0}]]}, \"Telegram Trigger\": {\"main\": [[{\"node\": \"PreProcessing\", \"type\": \"main\", \"index\": 0}]]}, \"Send Typing action\": {\"main\": [[{\"node\": \"Merge\", \"type\": \"main\", \"index\": 1}]]}}}"}]}
